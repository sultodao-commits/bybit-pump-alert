import os
import time
import ccxt
import numpy as np
import pandas as pd
import requests
from datetime import datetime, timedelta

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏ (Bybit Futures)
exchange = ccxt.bybit({
    "enableRateLimit": True,
    "options": {"defaultType": "future"}
})

# –ü–æ—Ä–æ–≥ –¥–ª—è –ø–∞–º–ø–∞ –∏ –¥–∞–º–ø–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
THRESHOLD = 3  

# –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω—É—Ç—ã)
INTERVAL = "1m"
LOOKBACK = 20  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_symbols():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (USDT perpetual futures)"""
    markets = exchange.load_markets()
    symbols = [s for s in markets if "USDT" in s and "PERP" in s]
    return symbols

def analyze_symbol(symbol):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=INTERVAL, limit=LOOKBACK)
        df = pd.DataFrame(ohlcv, columns=["time", "open", "high", "low", "close", "volume"])
        df["time"] = pd.to_datetime(df["time"], unit="ms")

        # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        last_close = df["close"].iloc[-1]
        prev_close = df["close"].iloc[-2]
        change_pct = (last_close - prev_close) / prev_close * 100

        # –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è (–º–∏–Ω-–º–∞–∫—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ LOOKBACK —Å–≤–µ—á–µ–π)
        min_price = df["low"].min()
        max_price = df["high"].max()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞: –µ—Å–ª–∏ –±—ã–ª –ø–∞–º–ø ‚Äî —à–∞–Ω—Å –ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–º–ø ‚Äî —à–∞–Ω—Å —Ä–æ—Å—Ç–∞
        if change_pct >= THRESHOLD:
            rebound_prob = np.clip((last_close - min_price) / (max_price - min_price + 1e-6), 0, 1)
            direction = "üöÄ –ü–ê–ú–ü"
            prob_text = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è: {round((1 - rebound_prob) * 100, 1)}%"
        elif change_pct <= -THRESHOLD:
            rebound_prob = np.clip((max_price - last_close) / (max_price - min_price + 1e-6), 0, 1)
            direction = "üìâ –î–ê–ú–ü"
            prob_text = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {round(rebound_prob * 100, 1)}%"
        else:
            return  # –Ω–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

        message = (
            f"<b>{direction} –Ω–∞ {symbol}</b>\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {round(change_pct, 2)}%\n"
            f"–¶–µ–Ω–∞: {last_close}\n\n"
            f"{prob_text}\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è: min={round(min_price, 4)}, max={round(max_price, 4)}\n"
            f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
        )
        send_telegram_message(message)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")

def main():
    send_telegram_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit Futures (–ø–∞–º–ø—ã –∏ –¥–∞–º–ø—ã).")
    symbols = fetch_symbols()
    send_telegram_message(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(symbols)} –ø–∞—Ä.")

    while True:
        for symbol in symbols:
            analyze_symbol(symbol)
            time.sleep(0.2)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        time.sleep(5)

if __name__ == "__main__":
    main()
