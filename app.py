#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - ULTRA OPTIMIZED
–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import os
import time
import traceback
import re
from datetime import datetime
from typing import List, Dict, Any, Optional

import requests
import ccxt

# ========================= –°–£–ü–ï–†-–ú–Ø–ì–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –£–õ–¨–¢–†–ê-–ú–Ø–ì–ö–ò–ï –§–ò–õ–¨–¢–†–´
PUMP_THRESHOLD = 3           # –ü–∞–º–ø –æ—Ç 3% (–±—ã–ª–æ 5)
RSI_OVERBOUGHT = 60          # RSI –æ—Ç 60 (–±—ã–ª–æ 70) - –°–ò–õ–¨–ù–û –°–ù–ò–ñ–ï–ù–û
VOLUME_SPIKE_RATIO = 1.2     # –û–±—ä–µ–º –æ—Ç 1.2x (–±—ã–ª–æ 1.5)

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DUMP = 8              # –¶–µ–ª—å -8% –æ—Ç –ø–∏–∫–∞ –ø–∞–º–ø–∞
STOP_LOSS = 5                # –°—Ç–æ–ø-–ª–æ—Å—Å +5% –æ—Ç –≤—Ö–æ–¥–∞
LEVERAGE = 5                 # –ü–ª–µ—á–æ 5x

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
MAX_MARKET_CAP = 20000000000 # –ú–∞–∫—Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è $20B
MIN_MARKET_CAP = 1000000     # –ú–∏–Ω –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è $1M
MIN_24H_VOLUME = 10000       # –ú–∏–Ω –æ–±—ä–µ–º $10K

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
POLL_INTERVAL_SEC = 30       # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 30 —Å–µ–∫
SIGNAL_COOLDOWN_MIN = 10     # –ö—É–ª–¥–∞—É–Ω –Ω–∞ –º–æ–Ω–µ—Ç—É 10 –º–∏–Ω

# ========================= –£–ü–†–û–©–ï–ù–ù–´–ô RSI =========================

def calculate_rsi_simple(prices: List[float], period: int = 10) -> float:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç RSI"""
    if len(prices) < period + 1:
        return 50.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
    
    try:
        gains = 0.0
        losses = 0.0
        
        # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for i in range(1, period + 1):
            change = prices[-i] - prices[-i-1]
            if change > 0:
                gains += change
            else:
                losses += abs(change)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_gain = gains / period
        avg_loss = losses / period if losses > 0 else 0.0001  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        
        # –†–∞—Å—á–µ—Ç RSI
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return min(max(rsi, 0), 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ RSI: {e}")
        return 50.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ========================= –û–°–ù–û–í–ù–û–ô –ö–û–î =========================

def analyze_pump_strength(ohlcv: List, volume_data: List) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –ø–∞–º–ø–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º RSI"""
    if len(ohlcv) < 3:
        return {"strength": 0, "rsi": 50, "volume_ratio": 1}
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏
        price_changes = []
        for i in range(1, min(3, len(ohlcv))):
            prev_close = float(ohlcv[-1-i][4])
            current_close = float(ohlcv[-1][4])
            if prev_close > 0:
                change = (current_close - prev_close) / prev_close * 100
                price_changes.append(change)
        
        strength = sum(price_changes) / len(price_changes) if price_changes else 0
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô RSI —Ä–∞—Å—á–µ—Ç
        closes = [float(x[4]) for x in ohlcv[-20:]]  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI
        rsi_val = calculate_rsi_simple(closes, 10)
        
        # Volume spike
        if len(volume_data) >= 10:
            recent_volumes = [float(x[5]) for x in volume_data[-10:]]
            avg_volume = sum(recent_volumes[:-1]) / (len(recent_volumes) - 1)
            current_volume = recent_volumes[-1]
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        else:
            volume_ratio = 1
        
        return {
            "strength": strength,
            "rsi": rsi_val,
            "volume_ratio": volume_ratio
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º–ø–∞: {e}")
        return {"strength": 0, "rsi": 50, "volume_ratio": 1}

def analyze_quality_signal(symbol: str, category: str, exchange, ohlcv_5m: List, ohlcv_15m: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ —Å –£–õ–¨–¢–†–ê-–º—è–≥–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        current_price = float(ticker['last'])
        pump_strength = analyze_pump_strength(ohlcv_5m, ohlcv_5m)
        
        print(f"üîç {symbol}: –ø–∞–º–ø={pump_strength['strength']:.1f}%, RSI={pump_strength['rsi']:.1f}, –æ–±—ä–µ–º=x{pump_strength['volume_ratio']:.1f}")
        
        # –°–£–ü–ï–†-–ú–Ø–ì–ö–ò–ï –£–°–õ–û–í–ò–Ø
        pump_ok = pump_strength["strength"] >= PUMP_THRESHOLD
        rsi_ok = pump_strength["rsi"] >= RSI_OVERBOUGHT
        volume_ok = pump_strength["volume_ratio"] >= VOLUME_SPIKE_RATIO
        
        # –î–û–°–¢–ê–¢–û–ß–ù–û –õ–Æ–ë–û–ì–û –ò–ó –£–°–õ–û–í–ò–ô!
        if pump_ok or (pump_ok and volume_ok) or (rsi_ok and volume_ok):
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫ –ø–∞–º–ø–∞
            recent_highs = [float(x[2]) for x in ohlcv_5m[-5:]]
            pump_high = max(recent_highs) if recent_highs else current_price
            
            entry_price = current_price
            take_profit = pump_high * (1 - TARGET_DUMP / 100)
            stop_loss = entry_price * (1 + STOP_LOSS / 100)
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = 60  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if pump_ok:
                confidence += 10
            if rsi_ok:
                confidence += 15
            if volume_ok:
                confidence += 10
            if category == "meme":
                confidence += 10
            
            return {
                "symbol": symbol,
                "category": category,
                "direction": "SHORT",
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "pump_high": pump_high,
                "pump_strength": pump_strength["strength"],
                "rsi": pump_strength["rsi"],
                "volume_ratio": pump_strength["volume_ratio"],
                "confidence": confidence,
                "leverage": LEVERAGE,
                "risk_reward": TARGET_DUMP / STOP_LOSS,
                "timestamp": time.time()
            }
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def main():
    print("üöÄüöÄüöÄ –ó–ê–ü–£–°–ö –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ë–û–¢–ê üöÄüöÄüöÄ")
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return
    
    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    markets = exchange.load_markets()
    symbols = []
    
    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and 
                market.get("settle") == "USDT" and "USDT" in symbol):
                symbols.append(symbol)
                if len(symbols) >= 200:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    break
        except:
            continue
    
    print(f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(symbols)} –º–æ–Ω–µ—Ç")
    
    send_telegram(
        f"üî• <b>–≠–ö–°–¢–†–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö - –°–£–ü–ï–†-–ú–Ø–ì–ö–ò–ï –§–ò–õ–¨–¢–†–´</b>\n"
        f"<b>–§–∏–ª—å—Ç—Ä—ã:</b> –ü–∞–º–ø ‚â•{PUMP_THRESHOLD}% | RSI ‚â•{RSI_OVERBOUGHT} | –û–±—ä–µ–º ‚â•{VOLUME_SPIKE_RATIO}x\n"
        f"<b>–¶–µ–ª—å:</b> -{TARGET_DUMP}% | <b>–ü–ª–µ—á–æ:</b> {LEVERAGE}x\n"
        f"<b>–ú–æ–Ω–µ—Ç:</b> {len(symbols)}\n\n"
        f"<i>‚ö° –°–ò–ì–ù–ê–õ–´ –î–û–õ–ñ–ù–´ –ü–û–Ø–í–ò–¢–¨–°–Ø!</i>"
    )
    
    cycle_count = 0
    
    while True:
        try:
            cycle_count += 1
            signals_found = 0
            
            print(f"\nüîÑ –¶–∏–∫–ª #{cycle_count} - —Å–∫–∞–Ω–∏—Ä—É–µ–º {len(symbols)} –º–æ–Ω–µ—Ç...")
            
            for symbol in symbols:
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    ohlcv_5m = exchange.fetch_ohlcv(symbol, '5m', limit=10)
                    ticker = exchange.fetch_ticker(symbol)
                    
                    if not ohlcv_5m or len(ohlcv_5m) < 3:
                        continue
                    
                    signal = analyze_quality_signal(symbol, "general", exchange, ohlcv_5m, ohlcv_5m, ticker)
                    
                    if signal:
                        signal_key = f"{symbol}_{cycle_count}"
                        if signal_key not in recent_signals:
                            recent_signals[signal_key] = time.time()
                            send_telegram(format_signal_message(signal))
                            print(f"üéâ –°–ò–ì–ù–ê–õ: {symbol} (–ø–∞–º–ø: {signal['pump_strength']:.1f}%, RSI: {signal['rsi']:.1f})")
                            signals_found += 1
                    
                    time.sleep(0.02)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                except Exception as e:
                    continue
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            current_time = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() 
                            if current_time - v < SIGNAL_COOLDOWN_MIN * 60}
            
            if signals_found > 0:
                print(f"üéä –ù–ê–ô–î–ï–ù–û –°–ò–ì–ù–ê–õ–û–í: {signals_found}")
            else:
                print("üòû –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)
        
        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_signal_message(signal: Dict) -> str:
    return (
        f"üéØ <b>–°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù!</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> SHORT üêª\n"
        f"<b>–ü–∞–º–ø:</b> {signal['pump_strength']:.1f}%\n"
        f"<b>RSI:</b> {signal['rsi']:.1f}\n"
        f"<b>–û–±—ä–µ–º:</b> x{signal['volume_ratio']:.1f}\n"
        f"<b>–í—Ö–æ–¥:</b> {signal['entry_price']:.6f}\n"
        f"<b>–¶–µ–ª—å:</b> {signal['take_profit']:.6f}\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']:.0f}%\n\n"
        f"<i>‚ö° –ú—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–π —Ä–∏—Å–∫!</i>"
    )

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

if __name__ == "__main__":
    main()
