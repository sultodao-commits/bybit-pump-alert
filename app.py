#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Alerts ‚Üí Telegram (Spot + Futures, Pumps + Dumps, History, Daily Report)

–§—É–Ω–∫—Ü–∏–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit Spot USDT –∏ Futures USDT (–ª–∏–Ω–µ–π–Ω—ã–µ –ø–µ—Ä–ø–µ—Ç—ã, defaultType="swap")
- –°–∏–≥–Ω–∞–ª—ã: üö® –ü–∞–º–ø (—Ä–æ—Å—Ç) –∏ üîª –î–∞–º–ø (–ø–∞–¥–µ–Ω–∏–µ) –Ω–∞ 5m/15m (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)
- –§–∏–ª—å—Ç—Ä—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ 24h –æ–±—ä—ë–º—É –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
- –ò—Å—Ç–æ—Ä–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç (min/max –∑–∞ 60–º, fwd 5/15/30/60–º)
- –í –∞–ª–µ—Ä—Ç–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ–∂—É—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–π –∂–µ –º–æ–Ω–µ—Ç–µ/—Ä—ã–Ω–∫—É/–¢–§/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
- –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –ø–æ UTC

–ó–∞–ø—É—Å–∫ –≤ Scalingo –∫–∞–∫ worker: Procfile ‚Üí `worker: python app.py`
"""

import os
import time
import sqlite3
import traceback
from datetime import datetime, timezone, timedelta
from typing import List, Tuple, Optional, Dict

import requests
import ccxt
from dotenv import load_dotenv

# ------------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è -------------------------

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
assert TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID"

POLL_INTERVAL_SEC = int(os.getenv("POLL_INTERVAL_SEC", "60"))

# –ü–æ—Ä–æ–≥–∏ –ø–∞–º–ø–∞ (—Ä–æ—Å—Ç, % –∑–∞ –æ–¥–Ω—É —Å–≤–µ—á—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¢–§)
THRESH_5M_PCT   = float(os.getenv("THRESH_5M_PCT", "6"))
THRESH_15M_PCT  = float(os.getenv("THRESH_15M_PCT", "12"))

# –ü–æ—Ä–æ–≥–∏ –¥–∞–º–ø–∞ (–ø–∞–¥–µ–Ω–∏–µ, –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã; —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥—ë—Ç chg <= -THRESH_*)
THRESH_5M_DROP_PCT  = float(os.getenv("THRESH_5M_DROP_PCT", "6"))
THRESH_15M_DROP_PCT = float(os.getenv("THRESH_15M_DROP_PCT", "12"))

# –§–∏–ª—å—Ç—Ä—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
MIN_24H_QUOTE_VOLUME_USDT = float(os.getenv("MIN_24H_QUOTE_VOLUME_USDT", "500000"))
MIN_LAST_PRICE_USDT       = float(os.getenv("MIN_LAST_PRICE_USDT", "0.002"))

# –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (—á–∞—Å UTC, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 06:00 UTC ~ 12:00 –ê–∑–∏—è/–ê–ª–º–∞—Ç—ã)
DAILY_REPORT_HOUR_UTC = int(os.getenv("DAILY_REPORT_HOUR_UTC", "6"))

# –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç–∞ (–º–∏–Ω—É—Ç)
POST_EFFECT_MINUTES = 60

# –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
HISTORY_LOOKBACK_DAYS = int(os.getenv("HISTORY_LOOKBACK_DAYS", "30"))

STATE_DB = os.path.join(os.path.dirname(__file__), "state.db")

TIMEFRAMES = [
    ("5m",  THRESH_5M_PCT,  THRESH_5M_DROP_PCT),
    ("15m", THRESH_15M_PCT, THRESH_15M_DROP_PCT),
]

# ------------------------- –£—Ç–∏–ª–∏—Ç—ã -------------------------

def now_utc() -> datetime:
    return datetime.now(timezone.utc)

def ts_to_iso(ts_ms: int) -> str:
    return datetime.fromtimestamp(ts_ms / 1000, tz=timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def send_telegram(text: str) -> None:
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    try:
        r = requests.post(url, json=payload, timeout=12)
        if r.status_code != 200:
            print(f"[TG] HTTP {r.status_code}: {r.text}")
    except Exception as e:
        print(f"[TG] Exception: {e}")

# ------------------------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (v2 —Å—Ö–µ–º—ã) -------------------------

def init_db() -> None:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    # –¥–µ-–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS alerts_v2 (
            key_symbol TEXT NOT NULL,     -- 'SPOT:BTC/USDT' –∏–ª–∏ 'FUT:BTC/USDT:USDT'
            timeframe  TEXT NOT NULL,     -- '5m' | '15m'
            direction  TEXT NOT NULL,     -- 'pump' | 'dump'
            candle_ts  INTEGER NOT NULL,  -- ms
            PRIMARY KEY (key_symbol, timeframe, direction, candle_ts)
        )
    """)
    # –∏—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç–∞
    cur.execute("""
        CREATE TABLE IF NOT EXISTS spikes_v2 (
            key_symbol TEXT NOT NULL,
            timeframe  TEXT NOT NULL,
            direction  TEXT NOT NULL,     -- 'pump' | 'dump'
            candle_ts  INTEGER NOT NULL,  -- ms
            price      REAL NOT NULL,     -- close –Ω–∞ —Å–≤–µ—á–µ —Å–æ–±—ã—Ç–∏—è
            -- –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ (–ø–æ close):
            min_return_60m REAL,          -- –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–Ω–∞–∏—Ö—É–¥—à–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞) –∑–∞ 60–º, % –∫ —Ü–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è
            max_return_60m REAL,          -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–Ω–∞–∏–ª—É—á—à–∏–π –æ—Ç—Å–∫–æ–∫) –∑–∞ 60–º, % –∫ —Ü–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è
            fwd_5m REAL, fwd_15m REAL, fwd_30m REAL, fwd_60m REAL,
            evaluated INTEGER DEFAULT 0,  -- 0 = –Ω–µ —Å—á–∏—Ç–∞–ª–∏ –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç; 1 = –ø–æ—Å—á–∏—Ç–∞–ª–∏
            PRIMARY KEY (key_symbol, timeframe, direction, candle_ts)
        )
    """)
    # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS meta (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    con.commit()
    con.close()

def was_alerted(key_symbol: str, timeframe: str, direction: str, candle_ts: int) -> bool:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("SELECT 1 FROM alerts_v2 WHERE key_symbol=? AND timeframe=? AND direction=? AND candle_ts=?",
                (key_symbol, timeframe, direction, candle_ts))
    row = cur.fetchone()
    con.close()
    return row is not None

def save_alert(key_symbol: str, timeframe: str, direction: str, candle_ts: int) -> None:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("INSERT OR IGNORE INTO alerts_v2(key_symbol, timeframe, direction, candle_ts) VALUES(?,?,?,?)",
                (key_symbol, timeframe, direction, candle_ts))
    con.commit()
    con.close()

def insert_spike(key_symbol: str, timeframe: str, direction: str, candle_ts: int, price: float) -> None:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("""
        INSERT OR IGNORE INTO spikes_v2(key_symbol, timeframe, direction, candle_ts, price)
        VALUES (?,?,?,?,?)
    """, (key_symbol, timeframe, direction, candle_ts, float(price)))
    con.commit()
    con.close()

def update_spike_outcomes(key_symbol: str, timeframe: str, direction: str, candle_ts: int,
                          min_return_60m: float, max_return_60m: float,
                          fwd5: Optional[float], fwd15: Optional[float],
                          fwd30: Optional[float], fwd60: Optional[float]) -> None:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("""
        UPDATE spikes_v2
        SET min_return_60m=?, max_return_60m=?, fwd_5m=?, fwd_15m=?, fwd_30m=?, fwd_60m=?, evaluated=1
        WHERE key_symbol=? AND timeframe=? AND direction=? AND candle_ts=?
    """, (min_return_60m, max_return_60m, fwd5, fwd15, fwd30, fwd60, key_symbol, timeframe, direction, candle_ts))
    con.commit()
    con.close()

def get_unevaluated_spikes(older_than_min: int = 5) -> List[Tuple[str, str, str, int, float]]:
    """
    –ë–µ—Ä—ë–º –≤—Å–ø–ª–µ—Å–∫–∏/–¥–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã –∏ –≥–¥–µ –ø—Ä–æ—à–ª–æ >= older_than_min –º–∏–Ω—É—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: key_symbol, timeframe, direction, candle_ts, price
    """
    cutoff_ms = int((now_utc() - timedelta(minutes=older_than_min)).timestamp() * 1000)
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("""
        SELECT key_symbol, timeframe, direction, candle_ts, price
        FROM spikes_v2
        WHERE evaluated=0 AND candle_ts <= ?
        ORDER BY candle_ts ASC
    """, (cutoff_ms,))
    rows = cur.fetchall()
    con.close()
    return rows

def recent_symbol_stats(key_symbol: str, timeframe: str, direction: str, days: int = HISTORY_LOOKBACK_DAYS) -> Optional[Dict[str, float]]:
    """
    –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –ø–æ—Ö–æ–∂–∏–º —Å–æ–±—ã—Ç–∏—è–º (—Ç–∞ –∂–µ –º–æ–Ω–µ—Ç–∞/—Ä—ã–Ω–æ–∫, —Ç–æ—Ç –∂–µ –¢–§, —Ç–æ –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    """
    since_ms = int((now_utc() - timedelta(days=days)).timestamp() * 1000)
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("""
        SELECT min_return_60m, max_return_60m, fwd_5m, fwd_15m, fwd_30m, fwd_60m
        FROM spikes_v2
        WHERE key_symbol=? AND timeframe=? AND direction=? AND evaluated=1 AND candle_ts>=?
    """, (key_symbol, timeframe, direction, since_ms))
    rows = cur.fetchall()
    con.close()
    if not rows:
        return None
    def avg(vals):
        vals = [v for v in vals if v is not None]
        return sum(vals)/len(vals) if vals else None
    min60 = [r[0] for r in rows if r[0] is not None]
    max60 = [r[1] for r in rows if r[1] is not None]
    f5  = [r[2] for r in rows if r[2] is not None]
    f15 = [r[3] for r in rows if r[3] is not None]
    f30 = [r[4] for r in rows if r[4] is not None]
    f60 = [r[5] for r in rows if r[5] is not None]
    stats = {
        "episodes": len(rows),
        "avg_min_60m": avg(min60),
        "avg_max_60m": avg(max60),
        "avg_fwd_5m":  avg(f5),
        "avg_fwd_15m": avg(f15),
        "avg_fwd_30m": avg(f30),
        "avg_fwd_60m": avg(f60),
    }
    return stats

def meta_get(key: str) -> Optional[str]:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("SELECT value FROM meta WHERE key=?", (key,))
    row = cur.fetchone()
    con.close()
    return row[0] if row else None

def meta_set(key: str, value: str) -> None:
    con = sqlite3.connect(STATE_DB)
    cur = con.cursor()
    cur.execute("INSERT OR REPLACE INTO meta(key, value) VALUES(?,?)", (key, value))
    con.commit()
    con.close()

# ------------------------- Bybit (ccxt) -------------------------

def ex_spot() -> ccxt.bybit:
    return ccxt.bybit({
        "enableRateLimit": True,
        "timeout": 20000,
        "options": {"defaultType": "spot"},
    })

def ex_swap() -> ccxt.bybit:
    # –õ–∏–Ω–µ–π–Ω—ã–µ –ø–µ—Ä–ø–µ—Ç—ã USDT
    return ccxt.bybit({
        "enableRateLimit": True,
        "timeout": 20000,
        "options": {"defaultType": "swap"},
    })

def pick_all_spot_usdt_symbols_with_liquidity(ex: ccxt.Exchange,
                                              min_qv_usdt: float,
                                              min_last_price: float) -> List[str]:
    markets = ex.load_markets(reload=True)
    tickers = ex.fetch_tickers(params={"type": "spot"})
    selected = []
    for sym, m in markets.items():
        try:
            if m.get("type") != "spot" or not m.get("spot"):
                continue
            if m.get("quote") != "USDT":
                continue
            base = m.get("base", "")
            if any(tag in base for tag in ["UP", "DOWN", "3L", "3S", "4L", "4S"]):
                continue
            if base in ["USDT", "USDC", "FDUSD", "DAI"]:
                continue
            t = tickers.get(sym, {})
            qv = float(t.get("quoteVolume") or t.get("baseVolume") or 0.0)
            last = float(t.get("last") or t.get("close") or 0.0)
            if qv < min_qv_usdt or last < min_last_price:
                continue
            selected.append(sym)
        except Exception:
            continue
    return selected

def pick_all_swap_usdt_symbols_with_liquidity(ex: ccxt.Exchange,
                                              min_qv_usdt: float,
                                              min_last_price: float) -> List[str]:
    """
    –ë–µ—Ä—ë–º –ª–∏–Ω–µ–π–Ω—ã–µ USDT-–ø–µ—Ä–ø–µ—Ç—ã: m['type']=='swap' –∏ m['linear']==True, settle='USDT', quote='USDT'
    –°–∏–º–≤–æ–ª—ã –≤–∏–¥–∞ 'BTC/USDT:USDT'
    """
    markets = ex.load_markets(reload=True)
    tickers = ex.fetch_tickers(params={"type": "swap"})
    selected = []
    for sym, m in markets.items():
        try:
            if m.get("type") != "swap" or not m.get("swap"):
                continue
            if not m.get("linear"):
                continue
            if m.get("settle") != "USDT":
                continue
            if m.get("quote") != "USDT":
                continue
            base = m.get("base", "")
            if any(tag in base for tag in ["UP", "DOWN", "3L", "3S", "4L", "4S"]):
                continue
            t = tickers.get(sym, {})
            qv = float(t.get("quoteVolume") or t.get("baseVolume") or 0.0)
            last = float(t.get("last") or t.get("close") or 0.0)
            if qv < min_qv_usdt or last < min_last_price:
                continue
            selected.append(sym)
        except Exception:
            continue
    return selected

def fetch_ohlcv_safe(ex: ccxt.Exchange, symbol: str, timeframe: str, limit: int = 200):
    return ex.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)

def last_bar_change_pct(ohlcv: list) -> Tuple[float, int, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chg%, ts_ms, close) –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ vs –ø—Ä–µ–¥—ã–¥—É—â–∞—è.
    """
    if not ohlcv or len(ohlcv) < 2:
        return 0.0, 0, 0.0
    prev_close = float(ohlcv[-2][4])
    last_close = float(ohlcv[-1][4])
    ts = int(ohlcv[-1][0])
    if prev_close == 0:
        return 0.0, ts, last_close
    return (last_close / prev_close - 1.0) * 100.0, ts, last_close

# ------------------------- –ü–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è -------------------------

def compute_post_effect(ex: ccxt.Exchange, symbol: str, timeframe: str,
                        spike_ts: int, spike_price: float, horizon_min: int = POST_EFFECT_MINUTES
                        ) -> Optional[Tuple[float, float, Optional[float], Optional[float], Optional[float], Optional[float]]]:
    """
    –°—á–∏—Ç–∞–µ—Ç:
      - min_return_60m (–Ω–∞–∏—Ö—É–¥—à–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞)
      - max_return_60m (–Ω–∞–∏–ª—É—á—à–∏–π –æ—Ç—Å–∫–æ–∫)
      - fwd 5/15/30/60m
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (min60, max60, f5, f15, f30, f60)
    """
    tf = timeframe
    tf_min = int(tf[:-1]) if tf.endswith("m") else int(tf[:-1]) * 60
    horizon_bars = max(1, horizon_min // tf_min)
    ohlcv = fetch_ohlcv_safe(ex, symbol, timeframe=tf, limit=500)
    if not ohlcv:
        return None

    idx = None
    for i in range(len(ohlcv)):
        if int(ohlcv[i][0]) == spike_ts:
            idx = i
            break
    if idx is None:
        return None

    end = min(len(ohlcv) - 1, idx + horizon_bars)
    if end <= idx:
        return None

    closes = [float(row[4]) for row in ohlcv[idx:end+1]]
    if not closes:
        return None

    min_price = min(closes[1:]) if len(closes) > 1 else closes[0]
    max_price = max(closes[1:]) if len(closes) > 1 else closes[0]

    min_return_60m = (min_price / spike_price - 1.0) * 100.0
    max_return_60m = (max_price / spike_price - 1.0) * 100.0

    def fwd(delta_min: int) -> Optional[float]:
        bars = max(1, delta_min // tf_min)
        j = idx + bars
        if j < len(ohlcv):
            return (float(ohlcv[j][4]) / spike_price - 1.0) * 100.0
        return None

    return (min_return_60m, max_return_60m, fwd(5), fwd(15), fwd(30), fwd(60))

# ------------------------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π -------------------------

def format_stats_block(stats: Optional[Dict[str, float]], direction: str) -> str:
    if not stats or stats.get("episodes", 0) == 0:
        return "–ò—Å—Ç–æ—Ä–∏—è: –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –º–∞–ª–æ."
    header = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–∂–∏—Ö –≤—Å–ø–ª–µ—Å–∫–æ–≤ (–¥–æ 60–º):" if direction == "pump" else "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–∂–∏—Ö –¥–∞–º–ø–æ–≤ (–¥–æ 60–º):"
    lines = [header, f"‚Äî —ç–ø–∏–∑–æ–¥–æ–≤: <b>{stats['episodes']}</b>"]
    if stats.get("avg_min_60m") is not None:
        lines.append(f"‚Äî —Å—Ä. —Ö—É–¥—à–∏–π —Ö–æ–¥: <b>{stats['avg_min_60m']:.2f}%</b>")
    if stats.get("avg_max_60m") is not None:
        lines.append(f"‚Äî —Å—Ä. –ª—É—á—à–∏–π —Ö–æ–¥: <b>{stats['avg_max_60m']:.2f}%</b>")
    if stats.get("avg_fwd_5m") is not None:
        lines.append(f"‚Äî —Å—Ä. —á–µ—Ä–µ–∑ 5–º: <b>{stats['avg_fwd_5m']:.2f}%</b>")
    if stats.get("avg_fwd_15m") is not None:
        lines.append(f"‚Äî —Å—Ä. —á–µ—Ä–µ–∑ 15–º: <b>{stats['avg_fwd_15m']:.2f}%</b>")
    if stats.get("avg_fwd_30m") is not None:
        lines.append(f"‚Äî —Å—Ä. —á–µ—Ä–µ–∑ 30–º: <b>{stats['avg_fwd_30m']:.2f}%</b>")
    if stats.get("avg_fwd_60m") is not None:
        lines.append(f"‚Äî —Å—Ä. —á–µ—Ä–µ–∑ 60–º: <b>{stats['avg_fwd_60m']:.2f}%</b>")
    return "\n".join(lines)

# ------------------------- –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç -------------------------

def maybe_daily_report() -> None:
    try:
        utc = now_utc()
        today = utc.strftime("%Y-%m-%d")
        if utc.hour != DAILY_REPORT_HOUR_UTC:
            return
        if meta_get("daily_report_date") == today:
            return

        since_ms = int((utc - timedelta(hours=24)).timestamp() * 1000)
        con = sqlite3.connect(STATE_DB)
        cur = con.cursor()
        cur.execute("""
            SELECT direction, COUNT(*)
            FROM spikes_v2
            WHERE candle_ts >= ?
            GROUP BY direction
        """, (since_ms,))
        rows = cur.fetchall()
        con.close()

        pumps = next((cnt for d, cnt in rows if d == "pump"), 0)
        dumps = next((cnt for d, cnt in rows if d == "dump"), 0)
        msg = (f"üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á)\n"
               f"‚Äî –ü–∞–º–ø–æ–≤: <b>{pumps}</b>\n"
               f"‚Äî –î–∞–º–ø–æ–≤: <b>{dumps}</b>\n"
               f"‚Äî –í—Ä–µ–º—è (UTC): {utc.strftime('%Y-%m-%d %H:%M')}")
        send_telegram(msg)
        meta_set("daily_report_date", today)
    except Exception as e:
        print(f"[REPORT] –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

# ------------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª -------------------------

def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    init_db()

    try:
        send_telegram(
            "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Bybit Spot + Futures; –ø–∞–º–ø—ã –∏ –¥–∞–º–ø—ã).\n"
            f"–§–∏–ª—å—Ç—Ä—ã: –æ–±—ä—ë–º ‚â• {int(MIN_24H_QUOTE_VOLUME_USDT):,} USDT, —Ü–µ–Ω–∞ ‚â• {MIN_LAST_PRICE_USDT} USDT.\n"
            f"–ü–æ—Ä–æ–≥–∏: Pumps 5m‚â•{THRESH_5M_PCT}%, 15m‚â•{THRESH_15M_PCT}% | Dumps 5m‚â§-{THRESH_5M_DROP_PCT}%, 15m‚â§-{THRESH_15M_DROP_PCT}%."
            .replace(",", " ")
        )
    except Exception as e:
        print(f"[BOOT PING] TG error: {e}")

    spot = ex_spot()
    fut  = ex_swap()

    try:
        spot_syms = pick_all_spot_usdt_symbols_with_liquidity(spot, MIN_24H_QUOTE_VOLUME_USDT, MIN_LAST_PRICE_USDT)
        fut_syms  = pick_all_swap_usdt_symbols_with_liquidity(fut,  MIN_24H_QUOTE_VOLUME_USDT, MIN_LAST_PRICE_USDT)
        send_telegram(f"üìä –ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –æ—Ç–æ–±—Ä–∞–Ω–æ: Spot <b>{len(spot_syms)}</b>, Futures <b>{len(fut_syms)}</b> –ø–∞—Ä.")
    except Exception as e:
        print(f"[SYMBOLS] –û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä: {e}")
        traceback.print_exc()
        spot_syms, fut_syms = [], []

    while True:
        cycle_start = time.time()
        try:
            # 1) –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
            maybe_daily_report()

            # 2) –î–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∂–¥—ë–º –º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç)
            try:
                pending = get_unevaluated_spikes(older_than_min=5)
                for key_symbol, timeframe, direction, candle_ts, price in pending:
                    market = "SPOT" if key_symbol.startswith("SPOT:") else "FUT"
                    ex = spot if market == "SPOT" else fut
                    try:
                        res = compute_post_effect(ex, key_symbol.split(":",1)[1], timeframe, candle_ts, price)
                        if res:
                            min60, max60, f5, f15, f30, f60 = res
                            update_spike_outcomes(key_symbol, timeframe, direction, candle_ts, min60, max60, f5, f15, f30, f60)
                            time.sleep(0.05)
                    except ccxt.RateLimitExceeded:
                        time.sleep(2)
                    except Exception as e:
                        print(f"[POST] –û—à–∏–±–∫–∞ {key_symbol} {timeframe}: {e}")
                        traceback.print_exc()
                        time.sleep(0.05)
            except Exception as e:
                print(f"[POST] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
                traceback.print_exc()

            # 3) –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            for timeframe, pump_thr, dump_thr in TIMEFRAMES:
                # --- Spot
                for sym in spot_syms:
                    key_symbol = f"SPOT:{sym}"
                    try:
                        ohlcv = fetch_ohlcv_safe(spot, sym, timeframe=timeframe, limit=200)
                        chg, ts_ms, close = last_bar_change_pct(ohlcv)
                        if ts_ms == 0:
                            continue

                        # –ü–∞–º–ø
                        if chg >= pump_thr and not was_alerted(key_symbol, timeframe, "pump", ts_ms):
                            insert_spike(key_symbol, timeframe, "pump", ts_ms, close)
                            save_alert(key_symbol, timeframe, "pump", ts_ms)
                            stats = recent_symbol_stats(key_symbol, timeframe, "pump")
                            msg = (
                                f"üö® <b>–ü–∞–º–ø</b> (Spot, {timeframe})\n"
                                f"–ú–æ–Ω–µ—Ç–∞: <b>{sym}</b>\n"
                                f"–†–æ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: <b>{chg:.2f}%</b>\n"
                                f"–°–≤–µ—á–∞: {ts_to_iso(ts_ms)}\n\n"
                                f"{format_stats_block(stats, 'pump')}\n\n"
                                f"<i>–ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏.</i>"
                            )
                            send_telegram(msg)
                            time.sleep(0.15)

                        # –î–∞–º–ø
                        if chg <= -dump_thr and not was_alerted(key_symbol, timeframe, "dump", ts_ms):
                            insert_spike(key_symbol, timeframe, "dump", ts_ms, close)
                            save_alert(key_symbol, timeframe, "dump", ts_ms)
                            stats = recent_symbol_stats(key_symbol, timeframe, "dump")
                            msg = (
                                f"üîª <b>–î–∞–º–ø</b> (Spot, {timeframe})\n"
                                f"–ú–æ–Ω–µ—Ç–∞: <b>{sym}</b>\n"
                                f"–ü–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: <b>{chg:.2f}%</b>\n"
                                f"–°–≤–µ—á–∞: {ts_to_iso(ts_ms)}\n\n"
                                f"{format_stats_block(stats, 'dump')}\n\n"
                                f"<i>–ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏.</i>"
                            )
                            send_telegram(msg)
                            time.sleep(0.15)

                    except ccxt.RateLimitExceeded:
                        time.sleep(3)
                    except Exception as e:
                        print(f"[SPOT] –û—à–∏–±–∫–∞ {sym} {timeframe}: {e}")
                        traceback.print_exc()
                        time.sleep(0.05)

                # --- Futures (–ø–µ—Ä–ø–µ—Ç—ã)
                for sym in fut_syms:
                    key_symbol = f"FUT:{sym}"
                    try:
                        ohlcv = fetch_ohlcv_safe(fut, sym, timeframe=timeframe, limit=200)
                        chg, ts_ms, close = last_bar_change_pct(ohlcv)
                        if ts_ms == 0:
                            continue

                        # –ü–∞–º–ø
                        if chg >= pump_thr and not was_alerted(key_symbol, timeframe, "pump", ts_ms):
                            insert_spike(key_symbol, timeframe, "pump", ts_ms, close)
                            save_alert(key_symbol, timeframe, "pump", ts_ms)
                            stats = recent_symbol_stats(key_symbol, timeframe, "pump")
                            msg = (
                                f"üö® <b>–ü–∞–º–ø</b> (Futures, {timeframe})\n"
                                f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: <b>{sym}</b>\n"
                                f"–†–æ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: <b>{chg:.2f}%</b>\n"
                                f"–°–≤–µ—á–∞: {ts_to_iso(ts_ms)}\n\n"
                                f"{format_stats_block(stats, 'pump')}\n\n"
                                f"<i>–ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏.</i>"
                            )
                            send_telegram(msg)
                            time.sleep(0.15)

                        # –î–∞–º–ø
                        if chg <= -dump_thr and not was_alerted(key_symbol, timeframe, "dump", ts_ms):
                            insert_spike(key_symbol, timeframe, "dump", ts_ms, close)
                            save_alert(key_symbol, timeframe, "dump", ts_ms)
                            stats = recent_symbol_stats(key_symbol, timeframe, "dump")
                            msg = (
                                f"üîª <b>–î–∞–º–ø</b> (Futures, {timeframe})\n"
                                f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: <b>{sym}</b>\n"
                                f"–ü–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: <b>{chg:.2f}%</b>\n"
                                f"–°–≤–µ—á–∞: {ts_to_iso(ts_ms)}\n\n"
                                f"{format_stats_block(stats, 'dump')}\n\n"
                                f"<i>–ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏.</i>"
                            )
                            send_telegram(msg)
                            time.sleep(0.15)

                    except ccxt.RateLimitExceeded:
                        time.sleep(3)
                    except Exception as e:
                        print(f"[FUT] –û—à–∏–±–∫–∞ {sym} {timeframe}: {e}")
                        traceback.print_exc()
                        time.sleep(0.05)

        except Exception as e:
            print(f"[CYCLE] –û—à–∏–±–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {e}")
            traceback.print_exc()

        elapsed = time.time() - cycle_start
        time.sleep(max(1.0, POLL_INTERVAL_SEC - elapsed))

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
