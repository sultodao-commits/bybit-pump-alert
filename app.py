#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - STRICT 20/DAY, PUMP>10%/1H
"""

import os
import time
import requests
import ccxt
from typing import List, Dict, Any, Optional

# ========================= –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –ñ—ë—Å—Ç–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—á–µ–Ω—å —á—ë—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
MIN_PUMP_STRENGTH = 10.0       # –¢—Ä–µ–±—É–µ–º –ø–∞–º–ø >= 10% –∑–∞ 1 —á–∞—Å (12—Ö5m —Å–≤–µ—á–µ–π)
MAX_PULLBACK_FROM_HIGH = 2.5   # –ú–∞–∫—Å –æ—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ 2.5%
MIN_RSI = 72                   # RSI –æ—Ç 72 (–º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
VOLUME_DECREASE = 0.75         # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º ‚â§0.75x –æ—Ç –ø–∏–∫–∞

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DUMP = 10               # –¶–µ–ª—å -10%
STOP_LOSS = 3.5                # –°—Ç–æ–ø-–ª–æ—Å—Å +3.5%
LEVERAGE = 4                   # –ü–ª–µ—á–æ 4x

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
MAX_DAILY_SIGNALS = 20         # –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
POLL_INTERVAL_SEC = 25         # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫
SIGNAL_COOLDOWN_MIN = 60       # –ö—É–ª–¥–∞—É–Ω 60 –º–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã

# ========================= –£–õ–£–ß–®–ï–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ =========================

def calculate_accurate_rsi(prices: List[float], period: int = 14) -> float:
    """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç RSI"""
    if len(prices) < period + 1:
        return 50.0
    
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    
    gains = [delta for delta in deltas if delta > 0]
    losses = [-delta for delta in deltas if delta < 0]
    
    if not gains and not losses:
        return 50.0
    
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return min(max(rsi, 0), 100)

def analyze_optimal_reversal(symbol: str, ohlcv: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    """–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤ ‚Äî –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
       - –ü–∞–º–ø >= MIN_PUMP_STRENGTH –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (12 —Å–≤–µ—á–µ–π –ø–æ 5m)
       - –û—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ <= MAX_PULLBACK_FROM_HIGH
       - RSI >= MIN_RSI
       - –û–±—ä—ë–º —Å–Ω–∏–∂–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∏–∫–∞
    """
    try:
        # –ù—É–∂–Ω—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º 13 —Å–≤–µ—á–µ–π, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å 12 —Å–≤–µ—á–µ–π = 1 —á–∞—Å
        if len(ohlcv) < 13:
            return None
        
        current_candle = ohlcv[-1]
        current_high = float(current_candle[2])
        current_low = float(current_candle[3])
        current_close = float(current_candle[4])
        current_volume = float(current_candle[5])
        current_open = float(current_candle[1])
        
        # ---------------------------------------------------------------------
        # 1) –ü–∞–º–ø –∑–∞ 1 —á–∞—Å (12 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5m —Å–≤–µ—á–µ–π)
        last_12 = ohlcv[-12:]
        highs_12 = [float(x[2]) for x in last_12]
        lows_12 = [float(x[3]) for x in last_12]
        hour_high = max(highs_12)
        hour_low = min(lows_12)
        pump_strength_hour = (hour_high - hour_low) / hour_low * 100 if hour_low > 0 else 0.0
        
        # –¢—Ä–µ–±—É–µ–º—ã–π –ø–∞–º–ø
        if pump_strength_hour < MIN_PUMP_STRENGTH:
            # –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ—â–Ω—ã–π –ø–∞–º–ø –∑–∞ —á–∞—Å
            return None
        
        # ---------------------------------------------------------------------
        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–ºa –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫–∞)
        recent_candles = ohlcv[-10:]
        recent_highs = [float(x[2]) for x in recent_candles]
        recent_lows = [float(x[3]) for x in recent_candles]
        absolute_high = max(recent_highs)
        absolute_low = min(recent_lows)
        
        pullback_from_high = (absolute_high - current_close) / absolute_high * 100 if absolute_high > 0 else 100.0
        if pullback_from_high > MAX_PULLBACK_FROM_HIGH:
            return None
        
        # ---------------------------------------------------------------------
        # 3) RSI
        closes = [float(x[4]) for x in ohlcv]
        rsi_current = calculate_accurate_rsi(closes)
        if rsi_current < MIN_RSI:
            return None
        
        # ---------------------------------------------------------------------
        # 4) –û–±—ä—ë–º ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–∏–∫–æ–≤—ã–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–∞—Ö
        recent_volumes = [float(x[5]) for x in recent_candles]
        volume_peak = max(recent_volumes[:-1]) if len(recent_volumes) > 1 else current_volume
        volume_ratio = current_volume / volume_peak if volume_peak > 0 else 1.0
        
        # ---------------------------------------------------------------------
        # 5) –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π (–≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å, –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ => rejection)
        body = abs(current_close - current_open)
        candle_range = current_high - current_low if (current_high - current_low) > 0 else 1e-9
        upper_wick = current_high - max(current_open, current_close)
        wick_ratio = upper_wick / body if body > 0 else upper_wick / candle_range
        
        is_doji = (body / candle_range) < 0.15 if candle_range > 0 else False
        
        print(f"üîé {symbol}: pump_1h={pump_strength_hour:.1f}%, –æ—Ç–∫–∞—Ç={pullback_from_high:.2f}%, RSI={rsi_current:.1f}, vol_ratio={volume_ratio:.2f}, wick={wick_ratio:.2f}")
        
        # ================== –°—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ ==================
        conditions = {
            "pump_1h": pump_strength_hour >= MIN_PUMP_STRENGTH,
            "near_high": pullback_from_high <= MAX_PULLBACK_FROM_HIGH,
            "overbought": rsi_current >= MIN_RSI,
            "volume_decreasing": volume_ratio <= VOLUME_DECREASE,
            "rejection_wick": wick_ratio >= 0.25,
            "not_doji": not is_doji
        }
        conditions_met = sum(1 for v in conditions.values() if v)
        
        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 4 —É—Å–ª–æ–≤–∏–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ pump_1h + near_high + overbought
        if (conditions_met >= 4 and conditions["pump_1h"] and conditions["near_high"] and conditions["overbought"]):
            # –ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            bonus_score = 0
            if pump_strength_hour > 15: bonus_score += 1
            if volume_ratio < 0.6: bonus_score += 1
            if wick_ratio > 0.4: bonus_score += 1
            
            entry_price = current_close
            take_profit = absolute_high * (1 - TARGET_DUMP / 100)
            stop_loss = entry_price * (1 + STOP_LOSS / 100)
            
            confidence = 60 + (conditions_met * 6) + (bonus_score * 5)
            confidence = min(confidence, 92)
            
            if pullback_from_high <= 1.0:
                stage = "üü¢ –£ –ü–ò–ö–ê - —Ä–∞–∑–≤–æ—Ä–æ—Ç imminent"
            elif pullback_from_high <= 1.8:
                stage = "üü° –ù–ê–ß–ê–õ–û –û–¢–ö–ê–¢–ê - —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞"
            else:
                stage = "üî¥ –û–¢–ö–ê–¢ –ò–î–ï–¢ - –µ—â—ë –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
            
            return {
                "symbol": symbol,
                "direction": "SHORT",
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "pump_high": hour_high,
                "pump_strength_hour": pump_strength_hour,
                "pullback_from_high": pullback_from_high,
                "rsi": rsi_current,
                "volume_ratio": volume_ratio,
                "wick_ratio": wick_ratio,
                "confidence": confidence,
                "leverage": LEVERAGE,
                "stage": stage,
                "conditions_met": f"{conditions_met}/6",
                "bonus_score": bonus_score,
                "timestamp": time.time()
            }
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def main():
    print("üéØ –ó–ê–ü–£–°–ö –ë–û–¢–ê ‚Äî –õ–ò–ú–ò–¢ 20 –°–ò–ì–ù–ê–õ–û–í/–î–ï–ù–¨, –ü–ê–ú–ü>10%/1–ß")
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
        return
    
    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤
    markets = exchange.load_markets()
    symbols = []
    
    volatile_keywords = ["PEPE", "FLOKI", "BONK", "SHIB", "DOGE", "MEME", "BOME", "WIF", "POPCAT", "ORDI", "SATS"]
    
    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and 
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                
                if any(keyword in symbol for keyword in volatile_keywords):
                    symbols.insert(0, symbol)
                else:
                    symbols.append(symbol)
                    
                if len(symbols) >= 160:
                    break
        except:
            continue
    
    print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(symbols)} –º–æ–Ω–µ—Ç (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ)")
    
    send_telegram(
        f"‚ö° <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù ‚Äî –ñ–Å–°–¢–ö–ò–ô –†–ï–ñ–ò–ú</b>\n\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {MAX_DAILY_SIGNALS}\n"
        f"‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ø–∞–º–ø ‚â•{MIN_PUMP_STRENGTH}% –∑–∞ 1 —á–∞—Å (12√ó5m)\n"
        f"‚Ä¢ –û—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ ‚â§{MAX_PULLBACK_FROM_HIGH}%\n"
        f"‚Ä¢ RSI ‚â•{MIN_RSI}\n"
    )
    
    daily_signals = 0
    last_reset = time.time()
    
    while True:
        try:
            # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            if time.time() - last_reset > 86400:
                daily_signals = 0
                last_reset = time.time()
                print("üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            if daily_signals >= MAX_DAILY_SIGNALS:
                print(f"üèÅ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_DAILY_SIGNALS} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –°–ø–ª—é {POLL_INTERVAL_SEC}s –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")
                time.sleep(POLL_INTERVAL_SEC)
                continue
            
            signals_found = 0
            print(f"\nüîÑ –°–∫–∞–Ω–∏—Ä—É–µ–º... | –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {daily_signals} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            for symbol in symbols:
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if daily_signals >= MAX_DAILY_SIGNALS:
                    break
                try:
                    # –ë–µ—Ä—ë–º 15 —Å–≤–µ—á–µ–π –ø–æ 5m (—Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤)
                    ohlcv = exchange.fetch_ohlcv(symbol, '5m', limit=15)
                    ticker = exchange.fetch_ticker(symbol)
                    
                    if not ohlcv or len(ohlcv) < 13:
                        continue
                    
                    signal = analyze_optimal_reversal(symbol, ohlcv, ticker)
                    
                    if signal:
                        # –ö—É–ª–¥–∞—É–Ω –ø–æ –º–æ–Ω–µ—Ç–µ
                        signal_key = symbol
                        current_time = time.time()
                        
                        if signal_key in recent_signals:
                            if (current_time - recent_signals[signal_key]) < SIGNAL_COOLDOWN_MIN * 60:
                                continue
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–∂–µ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
                        if daily_signals >= MAX_DAILY_SIGNALS:
                            break
                        
                        recent_signals[signal_key] = current_time
                        send_telegram(format_signal_message(signal))
                        daily_signals += 1
                        signals_found += 1
                        print(f"üéØ –°–ò–ì–ù–ê–õ #{daily_signals}: {symbol} | pump1h={signal['pump_strength_hour']:.1f}% | —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal['confidence']}%")
                    
                    # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
                    time.sleep(0.02)
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    # print(f"–û—à–∏–±–∫–∞ –ø–æ {symbol}: {e}")
                    continue
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—É–ª–¥–∞—É–Ω–∞ (–≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∫—É–ª–¥–∞—É–Ω–∞)
            current_time = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() 
                              if current_time - v < SIGNAL_COOLDOWN_MIN * 60 * 2}
            
            if signals_found > 0:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ: {signals_found} | –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {daily_signals}")
            else:
                print("‚è≥ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)
        
        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_signal_message(signal: Dict) -> str:
    return (
        f"üéØ <b>–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–í–û–†–û–¢ ‚Äî –ñ–Å–°–¢–ö–ò–ô</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–°—Ç–∞–¥–∏—è:</b> {signal['stage']}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> SHORT üêª\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']}%\n\n"
        f"<b>–ê–ù–ê–õ–ò–ó:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø –∑–∞ 1—á: {signal['pump_strength_hour']:.1f}%\n"
        f"‚Ä¢ –õ–æ–∫. –øe–∫: {signal['pump_high']:.6f}\n"
        f"‚Ä¢ –û—Ç –ø–∏–∫–∞: {signal['pullback_from_high']:.2f}%\n"
        f"‚Ä¢ RSI: {signal['rsi']:.1f}\n"
        f"‚Ä¢ –û–±—ä–µ–º: x{signal['volume_ratio']:.2f}\n"
        f"‚Ä¢ –£—Å–ª–æ–≤–∏–π: {signal['conditions_met']} (+{signal['bonus_score']} –±–æ–Ω—É—Å)\n\n"
        f"<b>–¢–û–†–ì–û–í–õ–Ø:</b>\n"
        f"‚Ä¢ –í—Ö–æ–¥: {signal['entry_price']:.6f}\n"
        f"‚Ä¢ –¶–µ–ª—å: {signal['take_profit']:.6f} (-{TARGET_DUMP}%)\n"
        f"‚Ä¢ –°—Ç–æ–ø: {signal['stop_loss']:.6f} (+{STOP_LOSS}%)\n"
        f"‚Ä¢ –ü–ª–µ—á–æ: {signal['leverage']}x\n\n"
        f"<i>‚ö° –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º ‚Äî –º–∞–∫—Å–∏–º—É–º {MAX_DAILY_SIGNALS} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å—É—Ç–∫–∏, –ø–∞–º–ø>= {MIN_PUMP_STRENGTH}% –∑–∞ 1—á</i>"
    )

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception:
        pass

if __name__ == "__main__":
    main()
