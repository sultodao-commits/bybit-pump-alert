#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - REAL-TIME REVERSAL
–¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã, –Ω–µ —É–ø–∞–≤—à–∏–µ –º–æ–Ω–µ—Ç—ã
"""

import os
import time
import requests
import ccxt
from typing import List, Dict, Any, Optional

# ========================= –°–¢–†–û–ì–ò–ï –†–ï–ê–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´ =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –§–ò–õ–¨–¢–†–´ –¢–û–õ–¨–ö–û –î–õ–Ø –ñ–ò–í–´–• –†–ê–ó–í–û–†–û–¢–û–í
MIN_PUMP_STRENGTH = 5          # –ü–∞–º–ø –æ—Ç 5% 
MAX_PULLBACK_FROM_HIGH = 2.0   # –ú–∞–∫—Å –æ—Ç–∫–∞—Ç 2% –æ—Ç –ø–∏–∫–∞ (–Ω–µ —É–ø–∞–≤—à–∏–µ!)
MIN_RSI = 75                   # RSI –æ—Ç 75 (—Ä–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
VOLUME_DECREASE = 0.7          # –û–±—ä–µ–º ‚â§0.7x –æ—Ç –ø–∏–∫–∞

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DUMP = 11               # –¶–µ–ª—å -11%
STOP_LOSS = 3                  # –°—Ç–æ–ø-–ª–æ—Å—Å +3%
LEVERAGE = 4                   # –ü–ª–µ—á–æ 4x

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
POLL_INTERVAL_SEC = 20         # –ß–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
SIGNAL_COOLDOWN_MIN = 20       # –ö—É–ª–¥–∞—É–Ω 20 –º–∏–Ω

# ========================= –£–õ–£–ß–®–ï–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ =========================

def calculate_accurate_rsi(prices: List[float], period: int = 14) -> float:
    """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç RSI"""
    if len(prices) < period + 1:
        return 50.0
    
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    
    gains = [delta for delta in deltas if delta > 0]
    losses = [-delta for delta in deltas if delta < 0]
    
    if not gains and not losses:
        return 50.0
    
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return min(max(rsi, 0), 100)

def analyze_live_reversal(symbol: str, ohlcv: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –∂–∏–≤—ã—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤ (–º–æ–Ω–µ—Ç—ã –µ—â–µ –Ω–µ —É–ø–∞–ª–∏)"""
    try:
        if len(ohlcv) < 15:
            return None
        
        current_candle = ohlcv[-1]
        current_high = float(current_candle[2])
        current_low = float(current_candle[3])
        current_close = float(current_candle[4])
        current_volume = float(current_candle[5])
        current_open = float(current_candle[1])
        
        # 1. –ù–∞—Ö–æ–¥–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–∏–∫ –ø–∞–º–ø–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π)
        recent_candles = ohlcv[-10:]
        recent_highs = [float(x[2]) for x in recent_candles]
        recent_lows = [float(x[3]) for x in recent_candles]
        
        absolute_high = max(recent_highs)
        absolute_low = min(recent_lows)
        
        # –°–∏–ª–∞ –ø–∞–º–ø–∞ –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
        pump_strength = (absolute_high - absolute_low) / absolute_low * 100
        
        # 2. –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç–∞ –ù–ï –£–ü–ê–õ–ê
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –ø–∏–∫—É (–Ω–µ –±–æ–ª–µ–µ 2% –æ—Ç–∫–∞—Ç–∞)
        pullback_from_high = (absolute_high - current_close) / absolute_high * 100
        
        # –ï—Å–ª–∏ –æ—Ç–∫–∞—Ç –±–æ–ª—å—à–µ 2% - –º–æ–Ω–µ—Ç–∞ —É–∂–µ —É–ø–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!
        if pullback_from_high > MAX_PULLBACK_FROM_HIGH:
            return None
        
        # 3. RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–°–û–ö–ò–ú (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
        closes = [float(x[4]) for x in ohlcv]
        rsi_current = calculate_accurate_rsi(closes)
        
        # –ï—Å–ª–∏ RSI –Ω–∏–∂–µ 75 - –Ω–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!
        if rsi_current < MIN_RSI:
            return None
        
        # 4. –û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –°–ù–ò–ñ–ê–¢–¨–°–Ø –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞
        recent_volumes = [float(x[5]) for x in recent_candles]
        volume_peak = max(recent_volumes[:-1]) if len(recent_volumes) > 1 else current_volume
        volume_ratio = current_volume / volume_peak if volume_peak > 0 else 1
        
        # 5. –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–µ
        body = abs(current_close - current_open)
        upper_wick = current_high - max(current_open, current_close)
        wick_ratio = upper_wick / body if body > 0 else 0
        
        # –î–æ–¥–∂–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        is_doji = body / (current_high - current_low) < 0.1 if (current_high - current_low) > 0 else False
        
        print(f"üîç {symbol}: –ø–∞–º–ø={pump_strength:.1f}%, –æ—Ç–∫–∞—Ç={pullback_from_high:.1f}%, RSI={rsi_current:.1f}, –æ–±—ä–µ–º={volume_ratio:.2f}x")
        
        # –û–°–ù–û–í–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –ñ–ò–í–û–ì–û –†–ê–ó–í–û–†–û–¢–ê:
        conditions = {
            "strong_pump": pump_strength >= MIN_PUMP_STRENGTH,
            "near_high": pullback_from_high <= MAX_PULLBACK_FROM_HIGH,  # –ï—â–µ —É –ø–∏–∫–∞
            "overbought": rsi_current >= MIN_RSI,  # –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            "volume_decreasing": volume_ratio <= VOLUME_DECREASE,
            "rejection_wick": wick_ratio >= 0.3,  # –°–∏–ª—å–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å
            "not_doji": not is_doji  # –ù–µ –¥–æ–¥–∂–∏
        }
        
        conditions_met = sum(conditions.values())
        
        # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–∑ 6 —É—Å–ª–æ–≤–∏–π, –≤–∫–ª—é—á–∞—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û near_high –∏ overbought
        if (conditions_met >= 4 and 
            conditions["near_high"] and 
            conditions["overbought"] and
            conditions["strong_pump"]):
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–π - –º–æ–Ω–µ—Ç–∞ –µ—â–µ —É –ø–∏–∫–∞, —Ü–µ–ª—å - –ø–∞–¥–µ–Ω–∏–µ
            entry_price = current_close
            take_profit = absolute_high * (1 - TARGET_DUMP / 100)
            stop_loss = entry_price * (1 + STOP_LOSS / 100)
            
            confidence = 60 + (conditions_met * 8)
            confidence = min(confidence, 90)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
            if pullback_from_high <= 0.5:
                stage = "üü¢ –¢–û–ß–ö–ê –†–ê–ó–í–û–†–û–¢–ê - —É –ø–∏–∫–∞"
            elif pullback_from_high <= 1.0:
                stage = "üü° –ù–ê–ß–ê–õ–û –û–¢–ö–ê–¢–ê - –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å–∫–æ–∫"
            else:
                stage = "üî¥ –í –ü–†–û–ì–†–ï–°–°–ï - –æ—Ç–∫–∞—Ç –Ω–∞—á–∞–ª—Å—è"
            
            return {
                "symbol": symbol,
                "direction": "SHORT",
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "pump_high": absolute_high,
                "pump_strength": pump_strength,
                "pullback_from_high": pullback_from_high,
                "rsi": rsi_current,
                "volume_ratio": volume_ratio,
                "wick_ratio": wick_ratio,
                "confidence": confidence,
                "leverage": LEVERAGE,
                "stage": stage,
                "conditions_met": f"{conditions_met}/6",
                "timestamp": time.time()
            }
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def main():
    print("üéØ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ñ–ò–í–´–• –†–ê–ó–í–û–†–û–¢–û–í üéØ")
    print("‚ö° –¢–û–õ–¨–ö–û –º–æ–Ω–µ—Ç—ã —É –ø–∏–∫–æ–≤ —Å RSI 75+!")
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return
    
    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º
    markets = exchange.load_markets()
    symbols = []
    
    volatile_keywords = ["PEPE", "FLOKI", "BONK", "SHIB", "DOGE", "MEME", "BOME", "WIF", "POPCAT"]
    
    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and 
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º
                if any(keyword in symbol for keyword in volatile_keywords):
                    symbols.insert(0, symbol)
                else:
                    symbols.append(symbol)
                    
                if len(symbols) >= 150:
                    break
        except:
            continue
    
    print(f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(symbols)} –º–æ–Ω–µ—Ç –Ω–∞ –∂–∏–≤—ã–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã")
    
    send_telegram(
        f"üéØ <b>–ë–û–¢ –ñ–ò–í–´–• –†–ê–ó–í–û–†–û–¢–û–í –ó–ê–ü–£–©–ï–ù</b>\n\n"
        f"<b>–§–ò–õ–¨–¢–†–´ –†–ê–ó–í–û–†–û–¢–ê –£ –ü–ò–ö–ê:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø ‚â•{MIN_PUMP_STRENGTH}% | –û—Ç–∫–∞—Ç ‚â§{MAX_PULLBACK_FROM_HIGH}%\n"
        f"‚Ä¢ RSI ‚â•{MIN_RSI} | –û–±—ä–µ–º ‚â§{VOLUME_DECREASE}x\n\n"
        f"<b>–¶–ï–õ–¨:</b> –º–æ–Ω–µ—Ç—ã —É –º–∞–∫—Å–∏–º—É–º–æ–≤ –ø–µ—Ä–µ–¥ –ø–∞–¥–µ–Ω–∏–µ–º\n"
        f"<b>–ò–°–ö–õ–Æ–ß–ï–ù–û:</b> —É–∂–µ —É–ø–∞–≤—à–∏–µ –º–æ–Ω–µ—Ç—ã —Å RSI 50\n\n"
        f"<i>‚ö° –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —É –ø–∏–∫–æ–≤!</i>"
    )
    
    while True:
        try:
            signals_found = 0
            
            print(f"\nüîÑ –°–∫–∞–Ω–∏—Ä—É–µ–º {len(symbols)} –º–æ–Ω–µ—Ç...")
            
            for symbol in symbols:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '5m', limit=15)
                    ticker = exchange.fetch_ticker(symbol)
                    
                    if not ohlcv or len(ohlcv) < 15:
                        continue
                    
                    signal = analyze_live_reversal(symbol, ohlcv, ticker)
                    
                    if signal:
                        signal_key = symbol
                        current_time = time.time()
                        
                        if signal_key in recent_signals:
                            if (current_time - recent_signals[signal_key]) < SIGNAL_COOLDOWN_MIN * 60:
                                continue
                        
                        recent_signals[signal_key] = current_time
                        send_telegram(format_reversal_message(signal))
                        print(f"üéØ –ñ–ò–í–û–ô –†–ê–ó–í–û–†–û–¢: {symbol} (RSI: {signal['rsi']:.1f}, –æ—Ç –ø–∏–∫–∞: {signal['pullback_from_high']:.1f}%)")
                        signals_found += 1
                    
                    time.sleep(0.02)
                    
                except Exception as e:
                    continue
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            current_time = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() 
                            if current_time - v < SIGNAL_COOLDOWN_MIN * 60 * 2}
            
            if signals_found > 0:
                print(f"üéä –ù–∞–π–¥–µ–Ω–æ –∂–∏–≤—ã—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤: {signals_found}")
            else:
                print("‚è≥ –ñ–∏–≤—ã—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤ –Ω–µ—Ç - –∂–¥–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É –ø–∏–∫–æ–≤")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)
        
        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_reversal_message(signal: Dict) -> str:
    return (
        f"üéØ <b>–ñ–ò–í–û–ô –†–ê–ó–í–û–†–û–¢ –£ –ü–ò–ö–ê</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–°—Ç–∞–¥–∏—è:</b> {signal['stage']}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> SHORT üêª\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']}%\n\n"
        f"<b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø: {signal['pump_strength']:.1f}%\n"
        f"‚Ä¢ –û—Ç –ø–∏–∫–∞: {signal['pullback_from_high']:.1f}% ‚ö°\n"
        f"‚Ä¢ RSI: {signal['rsi']:.1f} ‚ö°\n"
        f"‚Ä¢ –û–±—ä–µ–º: x{signal['volume_ratio']:.2f}\n"
        f"‚Ä¢ –£—Å–ª–æ–≤–∏–π: {signal['conditions_met']}\n\n"
        f"<b>–¢–û–†–ì–û–í–õ–Ø:</b>\n"
        f"‚Ä¢ –í—Ö–æ–¥: {signal['entry_price']:.6f}\n"
        f"‚Ä¢ –¶–µ–ª—å: {signal['take_profit']:.6f} (-{TARGET_DUMP}%)\n"
        f"‚Ä¢ –°—Ç–æ–ø: {signal['stop_loss']:.6f} (+{STOP_LOSS}%)\n"
        f"‚Ä¢ –ü–∏–∫: {signal['pump_high']:.6f}\n"
        f"‚Ä¢ –ü–ª–µ—á–æ: {signal['leverage']}x\n\n"
        f"<i>‚ö° –ú–æ–Ω–µ—Ç–∞ —É –ø–∏–∫–∞ - —Ä–∞–∑–≤–æ—Ä–æ—Ç imminent!</i>"
    )

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

if __name__ == "__main__":
    main()
