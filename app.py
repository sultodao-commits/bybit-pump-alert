#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - STRICT 5M BURST WITH VOLUME
–í—Å–ø–ª–µ—Å–∫–∏ ‚â•10% –∑–∞ 5 –º–∏–Ω—É—Ç —Å —Ä–æ—Å—Ç–æ–º –æ–±—ä—ë–º–∞ ‚â•50%
–ë–µ–∑ –≤—Ö–æ–¥–æ–≤, —Å—Ç–æ–ø–æ–≤ –∏ –æ—Ç–∫–∞—Ç–∞ –æ—Ç –ø–∏–∫–∞
–°–∏–≥–Ω–∞–ª –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
"""

import os
import time
import requests
import ccxt
from typing import List, Dict, Any, Optional

# ========================= –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

MIN_PUMP_STRENGTH = 10.0       # –í—Å–ø–ª–µ—Å–∫ ‚â•10% –∑–∞ 5 –º–∏–Ω—É—Ç
MIN_RSI = 72                   # RSI ‚â•72
MIN_VOLUME_RATIO = 1.5         # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º ‚â• 150% —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
POLL_INTERVAL_SEC = 25         # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
SIGNAL_COOLDOWN_MIN = 18       # –ö—É–ª–¥–∞—É–Ω 18 –º–∏–Ω
MAX_SIGNALS_PER_DAY = 20       # –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å

# ========================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =========================

def calculate_accurate_rsi(prices: List[float], period: int = 14) -> float:
    if len(prices) < period + 1:
        return 50.0
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d for d in deltas if d > 0]
    losses = [-d for d in deltas if d < 0]
    if not gains and not losses:
        return 50.0
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return min(max(rsi, 0), 100)

def analyze_burst_signal(symbol: str, ohlcv: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    try:
        if len(ohlcv) < 5:
            return None

        current = ohlcv[-1]
        current_close = float(current[4])
        current_open = float(current[1])
        current_high = float(current[2])
        current_low = float(current[3])
        current_volume = float(current[5])

        # === –í—Å–ø–ª–µ—Å–∫ –∑–∞ 5 –º–∏–Ω—É—Ç (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞) ===
        pump_5min = (current_high - current_low) / current_low * 100 if current_low > 0 else 0.0
        if pump_5min < MIN_PUMP_STRENGTH:
            return None

        # === RSI ===
        closes = [float(x[4]) for x in ohlcv]
        rsi_value = calculate_accurate_rsi(closes)
        if rsi_value < MIN_RSI:
            return None

        # === –û–±—ä—ë–º —Å —Ä–æ—Å—Ç–æ–º ‚â•50% ===
        recent_volumes = [float(x[5]) for x in ohlcv[-3:]]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
        previous_avg = sum(recent_volumes[:-1]) / len(recent_volumes[:-1]) if len(recent_volumes) > 1 else current_volume
        volume_ratio = current_volume / previous_avg if previous_avg > 0 else 1
        if volume_ratio < MIN_VOLUME_RATIO:
            return None

        # === –§–æ—Ä–º–∞ —Å–≤–µ—á–∏ ===
        body = abs(current_close - current_open)
        upper_wick = current_high - max(current_open, current_close)
        wick_ratio = upper_wick / body if body > 0 else 0
        is_doji = body / (current_high - current_low) < 0.15 if (current_high - current_low) > 0 else False
        if wick_ratio < 0.25 or is_doji:
            return None

        confidence = 60 + (pump_5min / 2)
        confidence = min(confidence, 90)

        print(f"‚úÖ {symbol}: –≤—Å–ø–ª–µ—Å–∫_5–º={pump_5min:.1f}%, RSI={rsi_value:.1f}, –æ–±—ä—ë–º={volume_ratio:.2f} (+{(volume_ratio-1)*100:.0f}%), —Ç–µ–Ω—å={wick_ratio:.2f}")

        return {
            "symbol": symbol,
            "pump_5min": pump_5min,
            "rsi": rsi_value,
            "volume_ratio": volume_ratio,
            "wick_ratio": wick_ratio,
            "confidence": confidence,
            "timestamp": time.time()
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

# ========================= TELEGRAM =========================

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

def format_signal_message(signal: Dict) -> str:
    return (
        f"üöÄ <b>–°–¢–†–û–ì–ò–ô –°–ò–ì–ù–ê–õ: –í–°–ü–õ–ï–°–ö ‚â•10% / 5–º</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']:.1f}%\n\n"
        f"<b>–ê–ù–ê–õ–ò–ó:</b>\n"
        f"‚Ä¢ –í—Å–ø–ª–µ—Å–∫ (5–º): {signal['pump_5min']:.2f}% ‚ö°\n"
        f"‚Ä¢ RSI: {signal['rsi']:.1f}\n"
        f"‚Ä¢ –û–±—ä—ë–º: x{signal['volume_ratio']:.2f} (+{(signal['volume_ratio']-1)*100:.0f}%)\n"
        f"‚Ä¢ –í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å: {signal['wick_ratio']:.2f}\n\n"
        f"<i>üéØ –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å —Å —Ä–æ—Å—Ç–æ–º –æ–±—ä—ë–º–∞ ‚â•50%.</i>"
    )

# ========================= –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ =========================

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê: –í–°–ü–õ–ï–°–ö ‚â•10% –ó–ê 5 –ú–ò–ù–£–¢ –° –†–û–°–¢–û–ú –û–ë–™–Å–ú–ê ‚â•50%")
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return

    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    signals_today = set()  # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –±—ã–ª–∏ —Å–∏–≥–Ω–∞–ª—ã

    markets = exchange.load_markets()
    symbols = []
    volatile_keywords = ["PEPE", "FLOKI", "BONK", "SHIB", "DOGE", "MEME", "BOME", "WIF", "POPCAT", "ORDI", "SATS"]

    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                if any(keyword in symbol for keyword in volatile_keywords):
                    symbols.insert(0, symbol)
                else:
                    symbols.append(symbol)
                if len(symbols) >= 160:
                    break
        except:
            continue

    send_telegram("ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>: —Ñ–∏–ª—å—Ç—Ä –≤—Å–ø–ª–µ—Å–∫–∏ ‚â•10% / 5–º, RSI ‚â•72, –æ–±—ä—ë–º ‚â•50% —Ä–æ—Å—Ç–∞. –¶–µ–ª—å ‚â§20 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å. –°–∏–≥–Ω–∞–ª—ã –ø–æ –º–æ–Ω–µ—Ç–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.")

    daily_signals = 0
    last_reset = time.time()

    while True:
        try:
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∏ —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            if time.time() - last_reset > 86400:
                daily_signals = 0
                last_reset = time.time()
                signals_today.clear()
                print("üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ –∏ —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

            print(f"\n‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... | –°–µ–≥–æ–¥–Ω—è: {daily_signals}/{MAX_SIGNALS_PER_DAY}")

            for symbol in symbols:
                if daily_signals >= MAX_SIGNALS_PER_DAY:
                    print("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                    break

                if symbol in signals_today:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                    continue

                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '5m', limit=10)
                    ticker = exchange.fetch_ticker(symbol)
                    if not ohlcv or len(ohlcv) < 5:
                        continue

                    signal = analyze_burst_signal(symbol, ohlcv, ticker)
                    if not signal:
                        continue

                    now = time.time()
                    if symbol in recent_signals and (now - recent_signals[symbol]) < SIGNAL_COOLDOWN_MIN * 60:
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    recent_signals[symbol] = now
                    signals_today.add(symbol)
                    send_telegram(format_signal_message(signal))
                    daily_signals += 1
                    print(f"üéØ –°–ò–ì–ù–ê–õ #{daily_signals}: {symbol}")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ {symbol}: {e}")
                    continue

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ recent_signals (–∫—É–ª–¥–∞—É–Ω)
            now = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() if now - v < SIGNAL_COOLDOWN_MIN * 60 * 2}

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)

        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

if __name__ == "__main__":
    main()
