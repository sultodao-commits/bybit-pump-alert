#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - STRICT MODE
–ë–µ–∑ –æ—Ç–∫–∞—Ç–∞ –æ—Ç –ø–∏–∫–∞, –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏
20 —Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å, –ø–∞–º–ø >10% / 1—á
"""

import os
import time
import requests
import ccxt
from typing import List, Dict, Any, Optional

# ========================= –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –§–∏–ª—å—Ç—Ä—ã
MIN_PUMP_STRENGTH = 10.0       # –ü–∞–º–ø ‚â• 10% –∑–∞ 1 —á–∞—Å
MIN_RSI = 72                   # RSI ‚â• 72
VOLUME_DECREASE = 0.75         # –û–±—ä—ë–º ‚â§ 0.75x –æ—Ç –ø–∏–∫–∞

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_DAILY_SIGNALS = 20         # –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
SIGNAL_COOLDOWN_MIN = 60       # –ö—É–ª–¥–∞—É–Ω 60 –º–∏–Ω
POLL_INTERVAL_SEC = 25         # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# =============================================================

def calculate_accurate_rsi(prices: List[float], period: int = 14) -> float:
    """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç RSI"""
    if len(prices) < period + 1:
        return 50.0
    deltas = [prices[i] - prices[i - 1] for i in range(1, len(prices))]
    gains = [d for d in deltas if d > 0]
    losses = [-d for d in deltas if d < 0]
    if not gains and not losses:
        return 50.0
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return min(max(rsi, 0), 100)

def analyze_strict_signal(symbol: str, ohlcv: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è '–æ—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞' –∏ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        if len(ohlcv) < 13:
            return None

        current_candle = ohlcv[-1]
        current_high = float(current_candle[2])
        current_low = float(current_candle[3])
        current_close = float(current_candle[4])
        current_open = float(current_candle[1])
        current_volume = float(current_candle[5])

        # –ü–∞–º–ø –∑–∞ 1 —á–∞—Å (12 —Å–≤–µ—á–µ–π –ø–æ 5 –º–∏–Ω—É—Ç)
        last_12 = ohlcv[-12:]
        highs = [float(x[2]) for x in last_12]
        lows = [float(x[3]) for x in last_12]
        hour_high = max(highs)
        hour_low = min(lows)
        pump_strength_hour = (hour_high - hour_low) / hour_low * 100 if hour_low > 0 else 0.0

        if pump_strength_hour < MIN_PUMP_STRENGTH:
            return None

        # RSI
        closes = [float(x[4]) for x in ohlcv]
        rsi_current = calculate_accurate_rsi(closes)
        if rsi_current < MIN_RSI:
            return None

        # –û–±—ä—ë–º
        recent_volumes = [float(x[5]) for x in ohlcv[-10:]]
        volume_peak = max(recent_volumes[:-1]) if len(recent_volumes) > 1 else current_volume
        volume_ratio = current_volume / volume_peak if volume_peak > 0 else 1.0

        # –§–æ—Ä–º–∞ —Å–≤–µ—á–∏
        body = abs(current_close - current_open)
        candle_range = current_high - current_low if (current_high - current_low) > 0 else 1e-9
        upper_wick = current_high - max(current_open, current_close)
        wick_ratio = upper_wick / body if body > 0 else upper_wick / candle_range
        is_doji = (body / candle_range) < 0.15 if candle_range > 0 else False

        print(f"üîé {symbol}: pump1h={pump_strength_hour:.1f}%, RSI={rsi_current:.1f}, vol={volume_ratio:.2f}, wick={wick_ratio:.2f}")

        # –£—Å–ª–æ–≤–∏—è
        conditions = {
            "pump_1h": pump_strength_hour >= MIN_PUMP_STRENGTH,
            "overbought": rsi_current >= MIN_RSI,
            "volume_decreasing": volume_ratio <= VOLUME_DECREASE,
            "rejection_wick": wick_ratio >= 0.25,
            "not_doji": not is_doji
        }
        conditions_met = sum(1 for v in conditions.values() if v)

        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 3 —É—Å–ª–æ–≤–∏–π
        if conditions_met >= 3:
            bonus_score = 0
            if pump_strength_hour > 15: bonus_score += 1
            if volume_ratio < 0.6: bonus_score += 1
            if wick_ratio > 0.4: bonus_score += 1

            confidence = 60 + (conditions_met * 7) + (bonus_score * 5)
            confidence = min(confidence, 95)

            return {
                "symbol": symbol,
                "pump_strength_hour": pump_strength_hour,
                "rsi": rsi_current,
                "volume_ratio": volume_ratio,
                "wick_ratio": wick_ratio,
                "confidence": confidence,
                "conditions_met": f"{conditions_met}/5",
                "bonus_score": bonus_score,
                "timestamp": time.time()
            }

        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def main():
    print("üéØ –ó–ê–ü–£–°–ö –°–¢–†–û–ì–û–ì–û –°–ò–ì–ù–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê (–ë–ï–ó –û–¢–ö–ê–¢–ê –ò –¢–û–†–ì–û–í–õ–ò)")
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return

    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    markets = exchange.load_markets()
    symbols = []

    volatile_keywords = ["PEPE", "FLOKI", "BONK", "SHIB", "DOGE", "MEME", "BOME", "WIF", "POPCAT", "ORDI", "SATS"]

    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear")
                and market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                if any(k in symbol for k in volatile_keywords):
                    symbols.insert(0, symbol)
                else:
                    symbols.append(symbol)
                if len(symbols) >= 160:
                    break
        except:
            continue

    send_telegram(
        f"‚ö° <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù</b>\n"
        f"‚Ä¢ –ü–∞–º–ø ‚â• {MIN_PUMP_STRENGTH}% –∑–∞ 1—á\n"
        f"‚Ä¢ RSI ‚â• {MIN_RSI}\n"
        f"‚Ä¢ –û–±—ä—ë–º ‚â§ {VOLUME_DECREASE}x\n"
        f"‚Ä¢ –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {MAX_DAILY_SIGNALS}\n"
        f"‚Ä¢ –ë–µ–∑ –æ—Ç–∫–∞—Ç–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"
    )

    daily_signals = 0
    last_reset = time.time()

    while True:
        try:
            # –°–±—Ä–æ—Å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            if time.time() - last_reset > 86400:
                daily_signals = 0
                last_reset = time.time()
                print("üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

            if daily_signals >= MAX_DAILY_SIGNALS:
                print(f"üèÅ –õ–∏–º–∏—Ç {MAX_DAILY_SIGNALS} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                time.sleep(POLL_INTERVAL_SEC)
                continue

            signals_found = 0
            print(f"\nüîÑ –°–∫–∞–Ω–∏—Ä—É–µ–º... | –°–µ–≥–æ–¥–Ω—è: {daily_signals} —Å–∏–≥–Ω–∞–ª–æ–≤")

            for symbol in symbols:
                if daily_signals >= MAX_DAILY_SIGNALS:
                    break
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '5m', limit=15)
                    ticker = exchange.fetch_ticker(symbol)
                    if not ohlcv or len(ohlcv) < 13:
                        continue

                    signal = analyze_strict_signal(symbol, ohlcv, ticker)
                    if signal:
                        current_time = time.time()
                        if symbol in recent_signals:
                            if (current_time - recent_signals[symbol]) < SIGNAL_COOLDOWN_MIN * 60:
                                continue
                        recent_signals[symbol] = current_time
                        send_telegram(format_signal_message(signal))
                        daily_signals += 1
                        signals_found += 1
                        print(f"üéØ –°–ò–ì–ù–ê–õ #{daily_signals}: {symbol} ({signal['confidence']}%)")

                    time.sleep(0.02)
                except:
                    continue

            # –û—á–∏—Å—Ç–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            now = time.time()
            recent_signals = {k: v for k, v in recent_signals.items()
                              if now - v < SIGNAL_COOLDOWN_MIN * 60 * 2}

            if signals_found == 0:
                print("‚è≥ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_signal_message(signal: Dict) -> str:
    return (
        f"üéØ <b>–°–ò–ì–ù–ê–õ –†–ê–ó–í–û–†–û–¢–ê</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']}%\n\n"
        f"<b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø –∑–∞ 1—á: {signal['pump_strength_hour']:.1f}%\n"
        f"‚Ä¢ RSI: {signal['rsi']:.1f}\n"
        f"‚Ä¢ –û–±—ä—ë–º: x{signal['volume_ratio']:.2f}\n"
        f"‚Ä¢ –¢–µ–Ω—å: {signal['wick_ratio']:.2f}\n"
        f"‚Ä¢ –£—Å–ª–æ–≤–∏–π: {signal['conditions_met']} (+{signal['bonus_score']} –±–æ–Ω—É—Å)\n\n"
        f"<i>‚ö° –ë–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏. –ß–∏—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç.</i>"
    )

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"},
            timeout=10
        )
    except:
        pass

if __name__ == "__main__":
    main()
