#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - TradingView Logic
–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ë–ï–ó –§–ò–õ–¨–¢–†–û–í
"""

import os
import time
import requests
import ccxt
import numpy as np
from typing import List, Dict, Any, Optional

# ========================= –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# ========================= –¢–ï–°–¢–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================

# CORE
RSI_LENGTH = 14
EMA_LENGTH = 50
BB_LENGTH = 20
BB_MULTIPLIER = 1.8

# THRESHOLDS (–û–ß–ï–ù–¨ –ú–Ø–ì–ö–ò–ï)
RSI_PANIC_THRESHOLD = 45    # –û–ß–ï–ù–¨ –º—è–≥–∫–æ
RSI_FOMO_THRESHOLD = 55     # –û–ß–ï–ù–¨ –º—è–≥–∫–æ

# –í–°–ï –§–ò–õ–¨–¢–†–´ –í–´–ö–õ–Æ–ß–ï–ù–´
USE_EMA_SIDE_FILTER = False
USE_SLOPE_FILTER = False
MIN_VOLUME_ZSCORE = -10.0   # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω
REQUIRE_RETURN_BB = False
REQUIRE_CANDLE_CONFIRM = False  # –í–´–ö–õ–Æ–ß–ï–ù–û
MIN_BODY_PCT = 0.0          # –õ—é–±–∞—è —Å–≤–µ—á–∞
USE_HTF_CONFIRM = False

POLL_INTERVAL_SEC = 25
SIGNAL_COOLDOWN_MIN = 5     # –£–º–µ–Ω—å—à–∏–ª –∫—É–ª–¥–∞—É–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
CHUNK_SIZE = 50             # –ú–µ–Ω—å—à–µ –º–æ–Ω–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞

# ========================= –ò–ù–î–ò–ö–ê–¢–û–†–´ =========================

def calculate_rsi(prices: List[float], period: int = 14) -> float:
    """–†–∞—Å—á–µ—Ç RSI"""
    if len(prices) < period + 1:
        return 50.0
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d for d in deltas if d > 0]
    losses = [-d for d in deltas if d < 0]
    if not gains and not losses:
        return 50.0
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return min(max(rsi, 0), 100)

def calculate_ema(prices: List[float], period: int) -> float:
    """–†–∞—Å—á–µ—Ç EMA"""
    if len(prices) < period:
        return prices[-1] if prices else 0
    weights = np.exp(np.linspace(-1., 0., period))
    weights /= weights.sum()
    return np.convolve(prices[-period:], weights, mode='valid')[-1]

def calculate_bollinger_bands(prices: List[float], period: int, mult: float) -> tuple:
    """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
    if len(prices) < period:
        basis = prices[-1] if prices else 0
        return basis, basis, basis
    
    basis = np.mean(prices[-period:])
    dev = mult * np.std(prices[-period:])
    upper = basis + dev
    lower = basis - dev
    return basis, upper, lower

# ========================= –õ–û–ì–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í =========================

def analyze_tv_signals(symbol: str, ohlcv: List) -> Optional[Dict[str, Any]]:
    try:
        if len(ohlcv) < 20:
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        closes = [float(c[4]) for c in ohlcv]
        highs = [float(c[2]) for c in ohlcv]
        lows = [float(c[3]) for c in ohlcv]

        current_close = closes[-1]
        current_high = highs[-1]
        current_low = lows[-1]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = calculate_rsi(closes, RSI_LENGTH)
        ema = calculate_ema(closes, EMA_LENGTH)
        basis, bb_upper, bb_lower = calculate_bollinger_bands(closes, BB_LENGTH, BB_MULTIPLIER)

        # –ü–†–û–°–¢–ï–ô–®–ê–Ø –õ–û–ì–ò–ö–ê - –¢–û–õ–¨–ö–û RSI –ò BB
        long_rsi = rsi < RSI_PANIC_THRESHOLD
        short_rsi = rsi > RSI_FOMO_THRESHOLD
        
        long_bb = current_low <= bb_lower
        short_bb = current_high >= bb_upper

        long_signal = long_rsi or long_bb
        short_signal = short_rsi or short_bb

        if not long_signal and not short_signal:
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        if long_signal:
            signal_type = "LONG"
            trigger_source = "RSI" if long_rsi else "BB"
            confidence = 70
        else:
            signal_type = "SHORT" 
            trigger_source = "RSI" if short_rsi else "BB"
            confidence = 70

        print(f"üéØ {symbol}: {signal_type} | RSI={rsi:.1f} | Close={current_close} | BB={bb_lower:.4f}-{bb_upper:.4f}")

        return {
            "symbol": symbol,
            "type": signal_type,
            "rsi": rsi,
            "ema": ema,
            "bb_upper": bb_upper,
            "bb_lower": bb_lower,
            "trigger": trigger_source,
            "confidence": confidence,
            "timestamp": time.time()
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

# ========================= TELEGRAM =========================

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

def format_signal_message(signal: Dict) -> str:
    if signal["type"] == "LONG":
        emoji = "üü¢"
        action = "LONG"
    else:
        emoji = "üî¥" 
        action = "SHORT"
    
    return (
        f"{emoji} <b>–¢–ï–°–¢ {action}</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>RSI:</b> {signal['rsi']:.1f}\n"
        f"<b>–¢—Ä–∏–≥–≥–µ—Ä:</b> {signal['trigger']}\n"
        f"<b>–¶–µ–Ω–∞:</b> {signal['ema']:.4f}\n\n"
        f"<i>üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</i>"
    )

# ========================= –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ =========================

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê: –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú (–ë–ï–ó –§–ò–õ–¨–¢–†–û–í)")
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return

    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}

    markets = exchange.load_markets()
    symbols = []

    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                symbols.append(symbol)
        except:
            continue

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 –º–æ–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    test_symbols = symbols[:50]
    print(f"üîç –¢–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(test_symbols)} –º–æ–Ω–µ—Ç")

    send_telegram(f"ü§ñ <b>–¢–ï–°–¢ –ó–ê–ü–£–©–ï–ù</b>: {len(test_symbols)} –º–æ–Ω–µ—Ç | –†–ï–ñ–ò–ú –ë–ï–ó –§–ò–õ–¨–¢–†–û–í")

    signal_count = 0

    while True:
        try:
            print(f"\n‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_symbols)} –º–æ–Ω–µ—Ç... | –°–∏–≥–Ω–∞–ª–æ–≤: {signal_count}")

            for symbol in test_symbols:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '15m', limit=20)
                    if not ohlcv:
                        continue

                    signal = analyze_tv_signals(symbol, ohlcv)
                    if not signal:
                        continue

                    now = time.time()
                    if symbol in recent_signals and (now - recent_signals[symbol]) < SIGNAL_COOLDOWN_MIN * 60:
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                    recent_signals[symbol] = now
                    send_telegram(format_signal_message(signal))
                    signal_count += 1
                    print(f"üéØ –°–ò–ì–ù–ê–õ #{signal_count}: {symbol}")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ {symbol}: {e}")
                    continue

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            now = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() if now - v < SIGNAL_COOLDOWN_MIN * 60 * 2}

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)

        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

if __name__ == "__main__":
    main()
