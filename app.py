#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - HIGH FREQUENCY REVERSAL
10+ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
"""

import os
import time
import requests
import ccxt
from typing import List, Dict, Any, Optional

# ========================= –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø 10+ –°–ò–ì–ù–ê–õ–û–í
MIN_PUMP_STRENGTH = 4          # –ü–∞–º–ø –æ—Ç 4% (–±—ã–ª–æ 5)
PRICE_REJECTION = 0.8          # –û—Ç–∫–∞—Ç 0.8% –æ—Ç –ø–∏–∫–∞ (–±—ã–ª–æ 1.0)
RSI_OVERBOUGHT = 70            # RSI –æ—Ç 70 (–±—ã–ª–æ 72)
VOLUME_DECREASE = 0.85         # –û–±—ä–µ–º ‚â§0.85x –æ—Ç –ø–∏–∫–∞ (–±—ã–ª–æ 0.8)

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DUMP = 9               # –¶–µ–ª—å -9%
STOP_LOSS = 3.5               # –°—Ç–æ–ø-–ª–æ—Å—Å +3.5%
LEVERAGE = 4                  # –ü–ª–µ—á–æ 4x

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
POLL_INTERVAL_SEC = 25        # –ß–∞—â–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ 40)
SIGNAL_COOLDOWN_MIN = 15      # –ú–µ–Ω—å—à–µ –∫—É–ª–¥–∞—É–Ω (–±—ã–ª–æ 25)

# ========================= –ü–†–û–°–¢–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ =========================

def calculate_simple_rsi(prices: List[float], period: int = 12) -> float:  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π RSI"""
    if len(prices) < period + 1:
        return 50.0
    
    gains = 0
    losses = 0
    
    for i in range(1, period + 1):
        change = prices[-i] - prices[-i-1]
        if change > 0:
            gains += change
        else:
            losses += abs(change)
    
    avg_gain = gains / period
    avg_loss = losses / period if losses > 0 else 0.0001
    
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def analyze_reversal_optimized(symbol: str, ohlcv: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        if len(ohlcv) < 12:  # –ú–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            return None
        
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_candle = ohlcv[-1]
        current_high = float(current_candle[2])
        current_low = float(current_candle[3])
        current_close = float(current_candle[4])
        current_volume = float(current_candle[5])
        
        # 1. –ê–Ω–∞–ª–∏–∑ –ø–∞–º–ø–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–≤–µ—á–µ–π)
        recent_highs = [float(x[2]) for x in ohlcv[-8:]]
        recent_lows = [float(x[3]) for x in ohlcv[-8:]]
        
        pump_high = max(recent_highs)
        pump_low = min(recent_lows)
        pump_strength = (pump_high - pump_low) / pump_low * 100
        
        # –°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞–º–ø
        if pump_strength < MIN_PUMP_STRENGTH:
            return None
        
        # 2. –û—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞
        price_rejection_ratio = (pump_high - current_close) / pump_high * 100
        
        # 3. RSI –∞–Ω–∞–ª–∏–∑
        closes = [float(x[4]) for x in ohlcv]
        rsi_current = calculate_simple_rsi(closes)
        
        # 4. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
        recent_volumes = [float(x[5]) for x in ohlcv[-8:]]
        max_volume = max(recent_volumes[:-2]) if len(recent_volumes) > 2 else current_volume
        volume_ratio = current_volume / max_volume if max_volume > 0 else 1
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏ (–≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å)
        current_open = float(current_candle[1])
        body = abs(current_close - current_open)
        upper_wick = current_high - max(current_open, current_close)
        wick_ratio = upper_wick / body if body > 0 else 0
        
        print(f"üîç {symbol}: –ø–∞–º–ø={pump_strength:.1f}%, –æ—Ç–∫–∞—Ç={price_rejection_ratio:.1f}%, RSI={rsi_current:.1f}, –æ–±—ä–µ–º={volume_ratio:.2f}x")
        
        # –û–°–ù–û–í–ù–´–ï –£–°–õ–û–í–ò–Ø (2 –∏–∑ 4 –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è + –ø–∞–º–ø)
        conditions_met = 0
        conditions_met += 1 if price_rejection_ratio >= PRICE_REJECTION else 0
        conditions_met += 1 if rsi_current >= RSI_OVERBOUGHT else 0  
        conditions_met += 1 if volume_ratio <= VOLUME_DECREASE else 0
        conditions_met += 1 if wick_ratio >= 0.2 else 0  # –í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å ‚â•20% (–±—ã–ª–æ 25%)
        
        # –ë–û–ù–£–° –∑–∞ —Å–∏–ª—å–Ω—ã–π –ø–∞–º–ø
        bonus_conditions = 0
        if pump_strength > 10:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ø–∞–º–ø
            bonus_conditions += 1
        if pump_strength > 15:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø
            bonus_conditions += 1
        
        total_conditions = conditions_met + bonus_conditions
        
        # –ú–ò–ù–ò–ú–£–ú 2 –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è –ò–õ–ò 1 –æ—Å–Ω–æ–≤–Ω–æ–µ + –±–æ–Ω—É—Å—ã
        if total_conditions >= 2 and conditions_met >= 1:
            # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–π
            entry_price = current_close
            take_profit = pump_high * (1 - TARGET_DUMP / 100)
            stop_loss = entry_price * (1 + STOP_LOSS / 100)
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±–∞–∑–æ–≤–∞—è + –∑–∞ —É—Å–ª–æ–≤–∏—è)
            confidence = 55 + (total_conditions * 12)
            confidence = min(confidence, 85)
            
            return {
                "symbol": symbol,
                "direction": "SHORT", 
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "pump_high": pump_high,
                "pump_strength": pump_strength,
                "price_rejection": price_rejection_ratio,
                "rsi": rsi_current,
                "volume_ratio": volume_ratio,
                "wick_ratio": wick_ratio,
                "confidence": confidence,
                "leverage": LEVERAGE,
                "conditions_met": total_conditions,
                "timestamp": time.time()
            }
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def main():
    print("üéØ –ó–ê–ü–£–°–ö –í–´–°–û–ö–û–ß–ê–°–¢–û–¢–ù–û–ì–û –ë–û–¢–ê –†–ê–ó–í–û–†–û–¢–û–í üéØ")
    print("üí™ –¶–ï–õ–¨: 10+ –°–ò–ì–ù–ê–õ–û–í –í –î–ï–ù–¨!")
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return
    
    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ë–û–õ–¨–®–ï —Å–∏–º–≤–æ–ª–æ–≤
    markets = exchange.load_markets()
    symbols = []
    
    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and 
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ–º–Ω—ã–º –∏ –Ω–∏–∑–∫–æ–∫–∞–ø–æ–≤—ã–º –º–æ–Ω–µ—Ç–∞–º
                if any(x in symbol for x in ["PEPE", "FLOKI", "BONK", "SHIB", "DOGE"]):
                    symbols.insert(0, symbol)  # –ú–µ–º–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ
                else:
                    symbols.append(symbol)
                if len(symbols) >= 180:  # –ë–û–õ–¨–®–ï –º–æ–Ω–µ—Ç (–±—ã–ª–æ 120)
                    break
        except:
            continue
    
    print(f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(symbols)} –º–æ–Ω–µ—Ç (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ–º–∞–º)")
    
    send_telegram(
        f"üöÄ <b>–í–´–°–û–ö–û–ß–ê–°–¢–û–¢–ù–´–ô –ë–û–¢ –†–ê–ó–í–û–†–û–¢–û–í –ó–ê–ü–£–©–ï–ù</b>\n"
        f"<b>–¶–µ–ª—å:</b> 10+ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        f"<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø ‚â•{MIN_PUMP_STRENGTH}% | –û—Ç–∫–∞—Ç ‚â•{PRICE_REJECTION}%\n"  
        f"‚Ä¢ RSI ‚â•{RSI_OVERBOUGHT} | –û–±—ä–µ–º ‚â§{VOLUME_DECREASE}x\n"
        f"<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>\n"
        f"‚Ä¢ –¶–µ–ª—å: -{TARGET_DUMP}% | –°—Ç–æ–ø: +{STOP_LOSS}%\n"
        f"‚Ä¢ –ü–ª–µ—á–æ: {LEVERAGE}x | –ú–æ–Ω–µ—Ç: {len(symbols)}\n\n"
        f"<i>‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è!</i>"
    )
    
    cycle_count = 0
    daily_signals = 0
    last_reset = time.time()
    
    while True:
        try:
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            if time.time() - last_reset > 86400:
                daily_signals = 0
                last_reset = time.time()
                print("üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            cycle_count += 1
            signals_found = 0
            
            print(f"\nüîÑ –¶–∏–∫–ª #{cycle_count} | –°–µ–≥–æ–¥–Ω—è: {daily_signals}/10+ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            for symbol in symbols:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '5m', limit=12)  # –ú–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                    ticker = exchange.fetch_ticker(symbol)
                    
                    if not ohlcv or len(ohlcv) < 12:
                        continue
                    
                    signal = analyze_reversal_optimized(symbol, ohlcv, ticker)
                    
                    if signal:
                        signal_key = symbol
                        current_time = time.time()
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
                        if signal_key in recent_signals:
                            if (current_time - recent_signals[signal_key]) < SIGNAL_COOLDOWN_MIN * 60:
                                continue
                        
                        recent_signals[signal_key] = current_time
                        send_telegram(format_signal_message(signal))
                        print(f"üéØ –°–ò–ì–ù–ê–õ #{daily_signals + 1}: {symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']}%)")
                        signals_found += 1
                        daily_signals += 1
                        
                        # –õ–∏–º–∏—Ç –Ω–∞ –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
                        if daily_signals >= 25:
                            print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                            time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
                    
                    time.sleep(0.015)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                except Exception as e:
                    continue
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            current_time = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() 
                            if current_time - v < SIGNAL_COOLDOWN_MIN * 60 * 3}
            
            if signals_found > 0:
                print(f"üéä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_found} | –°–µ–≥–æ–¥–Ω—è: {daily_signals}")
            else:
                print("‚è≥ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
            time.sleep(15)
        
        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_signal_message(signal: Dict) -> str:
    return (
        f"üîÅ <b>–°–ò–ì–ù–ê–õ –†–ê–ó–í–û–†–û–¢–ê #{int(signal['timestamp'] % 1000)}</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> SHORT üêª\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']}%\n\n"
        f"<b>–ê–Ω–∞–ª–∏–∑:</b>\n"
        f"‚Ä¢ –ü–∞–º–ø: {signal['pump_strength']:.1f}%\n"
        f"‚Ä¢ –û—Ç–∫–∞—Ç: {signal['price_rejection']:.1f}%\n" 
        f"‚Ä¢ RSI: {signal['rsi']:.1f}\n"
        f"‚Ä¢ –û–±—ä–µ–º: x{signal['volume_ratio']:.2f}\n"
        f"‚Ä¢ –£—Å–ª–æ–≤–∏–π: {signal['conditions_met']}/4\n\n"
        f"<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>\n"
        f"‚Ä¢ –í—Ö–æ–¥: {signal['entry_price']:.6f}\n"
        f"‚Ä¢ –¶–µ–ª—å: {signal['take_profit']:.6f} (-{TARGET_DUMP}%)\n"
        f"‚Ä¢ –°—Ç–æ–ø: {signal['stop_loss']:.6f} (+{STOP_LOSS}%)\n"
        f"‚Ä¢ –ü–ª–µ—á–æ: {signal['leverage']}x\n\n"
        f"<i>‚ö° –†–∏—Å–∫: —Å—Ä–µ–¥–Ω–∏–π | –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: –≤—ã—Å–æ–∫–∏–π</i>"
    )

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

if __name__ == "__main__":
    main()
