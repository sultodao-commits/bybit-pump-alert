#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import asyncio
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

import ccxt
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ===================== –ö–û–ù–§–ò–ì =====================

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
assert BOT_TOKEN and CHAT_ID, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID"

POLL_INTERVAL_SEC = int(os.getenv("POLL_INTERVAL_SEC", "60"))   # –ø–µ—Ä–∏–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
LOOKAHEAD_MIN     = int(os.getenv("LOOKAHEAD_MIN", "15"))       # –æ–∫–Ω–æ –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
PROB_SAMPLE_N     = int(os.getenv("PROB_SAMPLE_N", "20"))       # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–µ–π—Å–æ–≤ –±—Ä–∞—Ç—å

# –ü–æ—Ä–æ–≥–∏ (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!)
THRESH_5M_PCT       = float(os.getenv("THRESH_5M_PCT", "6"))
THRESH_15M_PCT      = float(os.getenv("THRESH_15M_PCT", "12"))
THRESH_5M_DROP_PCT  = float(os.getenv("THRESH_5M_DROP_PCT", "6"))
THRESH_15M_DROP_PCT = float(os.getenv("THRESH_15M_DROP_PCT", "12"))

# –§–∏–ª—å—Ç—Ä—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
MIN_24H_QUOTE_VOLUME_USDT = float(os.getenv("MIN_24H_QUOTE_VOLUME_USDT", "500000"))
MIN_LAST_PRICE_USDT       = float(os.getenv("MIN_LAST_PRICE_USDT", "0.002"))

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
DAILY_REPORT_HOUR_UTC = int(os.getenv("DAILY_REPORT_HOUR_UTC", "6"))

DB_PATH = os.path.join(os.path.dirname(__file__), "state.db")

# ===================== –£–¢–ò–õ–ò–¢–´ TG =====================

def tg_send(text: str, chat_id: Optional[str] = None) -> None:
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        requests.post(
            url,
            json={
                "chat_id": chat_id or CHAT_ID,
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": True,
            },
            timeout=15,
        )
    except Exception as e:
        print("[TG]", e)

# ===================== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====================

def db() -> sqlite3.Connection:
    return sqlite3.connect(DB_PATH)

def db_init() -> None:
    con = db(); c = con.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            direction TEXT NOT NULL,     -- 'pump' | 'dump'
            timeframe TEXT NOT NULL,     -- '5m' | '15m'
            percent REAL NOT NULL,
            price REAL NOT NULL,         -- close –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞
            ts TEXT NOT NULL DEFAULT (datetime('now'))
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS meta (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    con.commit(); con.close()

def save_alert(symbol: str, direction: str, timeframe: str, percent: float, price: float) -> None:
    con = db(); c = con.cursor()
    c.execute(
        "INSERT INTO alerts(symbol, direction, timeframe, percent, price) VALUES (?,?,?,?,?)",
        (symbol, direction, timeframe, percent, price),
    )
    con.commit(); con.close()

def last_n_alerts(symbol: str, direction: str, limit_n: int) -> List[Tuple[str, float, float]]:
    con = db(); c = con.cursor()
    c.execute("""
        SELECT ts, percent, price
        FROM alerts
        WHERE symbol=? AND direction=?
        ORDER BY ts DESC
        LIMIT ?
    """, (symbol, direction, limit_n))
    rows = c.fetchall()
    con.close()
    return rows

def simple_history_stats(symbol: str, direction: str, limit_n: int = 10) -> Optional[Dict[str, float]]:
    rows = last_n_alerts(symbol, direction, limit_n)
    if not rows:
        return None
    vals = [float(r[1]) for r in rows]
    return {
        "count": len(vals),
        "avg": sum(vals)/len(vals),
        "max": max(vals),
        "min": min(vals),
    }

def meta_get(key: str) -> Optional[str]:
    con = db(); c = con.cursor()
    c.execute("SELECT value FROM meta WHERE key=?", (key,))
    row = c.fetchone()
    con.close()
    return row[0] if row else None

def meta_set(key: str, value: str) -> None:
    con = db(); c = con.cursor()
    c.execute("INSERT OR REPLACE INTO meta(key, value) VALUES(?,?)", (key, value))
    con.commit(); con.close()

# ===================== BYBIT FUTURES (ccxt) =====================

def ex_futures() -> ccxt.bybit:
    # –î–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤ Bybit —É ccxt –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å defaultType="swap"
    return ccxt.bybit({
        "enableRateLimit": True,
        "timeout": 20000,
        "options": {"defaultType": "swap"},
    })

def pick_swap_usdt_symbols(ex: ccxt.bybit,
                           min_qv_usdt: float,
                           min_last_price: float) -> List[str]:
    markets = ex.load_markets(reload=True)
    tickers = ex.fetch_tickers(params={"type": "swap"})
    out: List[str] = []
    for sym, m in markets.items():
        try:
            if m.get("type") != "swap" or not m.get("swap"):
                continue
            if not m.get("linear"):
                continue
            if m.get("settle") != "USDT":
                continue
            if m.get("quote") != "USDT":
                continue
            base = m.get("base", "")
            if any(tag in base for tag in ["UP", "DOWN", "3L", "3S", "4L", "4S"]):
                continue
            t = tickers.get(sym, {})
            qv = float(t.get("quoteVolume") or t.get("baseVolume") or 0.0)
            last = float(t.get("last") or t.get("close") or 0.0)
            if qv < min_qv_usdt or last < min_last_price:
                continue
            out.append(sym)
        except Exception:
            continue
    return out

# ===================== –†–ê–°–ß–Å–¢ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ò –î–ò–ù–ê–ú–ò–ö–ò =====================

def probability_after(ex: ccxt.bybit, symbol: str, direction: str,
                      lookahead_min: int = LOOKAHEAD_MIN, sample_n: int = PROB_SAMPLE_N) -> Tuple[Optional[float], int]:
    """
    –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ lookahead_min:
      pump -> –¥–æ–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ close –ø–æ–∑–∂–µ < –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç–∫–∞—Ç)
      dump -> –¥–æ–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ close –ø–æ–∑–∂–µ > –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç—Å–∫–æ–∫)
    """
    rows = last_n_alerts(symbol, direction, sample_n)
    if not rows:
        return None, 0

    succ, tot = 0, 0
    for ts_str, _, entry_price in rows:
        try:
            since_ms = int(datetime.strptime(ts_str, "%Y-%m-%d %H:%M:%S").timestamp()) * 1000
            ohl = ex.fetch_ohlcv(symbol, "1m", since=since_ms, limit=lookahead_min + 3)
            if len(ohl) < lookahead_min:
                continue
            future_close = float(ohl[-1][4])
            if direction == "pump" and future_close < float(entry_price):
                succ += 1
            if direction == "dump" and future_close > float(entry_price):
                succ += 1
            tot += 1
        except Exception:
            continue
    if tot == 0:
        return None, 0
    return round(succ / tot * 100.0, 1), tot

def extended_dynamics(ex: ccxt.bybit, symbol: str, direction: str,
                      sample_n: int = PROB_SAMPLE_N) -> Dict[int, Optional[float]]:
    """
    –°—Ä–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5/15/30/60 –º–∏–Ω—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞.
    """
    rows = last_n_alerts(symbol, direction, sample_n)
    horizons = [5, 15, 30, 60]
    store: Dict[int, List[float]] = {h: [] for h in horizons}
    if not rows:
        return {h: None for h in horizons}

    for ts_str, _, entry_price in rows:
        try:
            since_ms = int(datetime.strptime(ts_str, "%Y-%m-%d %H:%M:%S").timestamp()) * 1000
            ohl = ex.fetch_ohlcv(symbol, "1m", since=since_ms, limit=65)
            closes = [float(x[4]) for x in ohl]
            if not closes:
                continue
            for h in horizons:
                idx = min(h, len(closes)-1)
                chg = (closes[idx] / float(entry_price) - 1.0) * 100.0
                store[h].append(chg)
        except Exception:
            continue
    return {h: (round(sum(v)/len(v), 2) if v else None) for h, v in store.items()}

# ===================== –°–ö–ê–ù –†–´–ù–ö–ê =====================

def scan_symbols(ex: ccxt.bybit, symbols: List[str]) -> None:
    for sym in symbols:
        try:
            ohlcv = ex.fetch_ohlcv(sym, "1m", limit=16)
            if len(ohlcv) < 16:
                continue
            c_now  = float(ohlcv[-1][4])
            c_5m   = float(ohlcv[-6][4])
            c_15m  = float(ohlcv[-16][4])
            chg_5m  = (c_now / c_5m  - 1.0) * 100.0
            chg_15m = (c_now / c_15m - 1.0) * 100.0

            # –ü–∞–º–ø—ã
            if chg_5m  >= THRESH_5M_PCT:   fire_alert(ex, sym, "pump", "5m",  chg_5m,  c_now)
            if chg_15m >= THRESH_15M_PCT:  fire_alert(ex, sym, "pump", "15m", chg_15m, c_now)
            # –î–∞–º–ø—ã
            if chg_5m  <= -THRESH_5M_DROP_PCT:   fire_alert(ex, sym, "dump", "5m",  chg_5m,  c_now)
            if chg_15m <= -THRESH_15M_DROP_PCT:  fire_alert(ex, sym, "dump", "15m", chg_15m, c_now)

        except Exception:
            # —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
            continue

def fire_alert(ex: ccxt.bybit, symbol: str, direction: str, timeframe: str, percent: float, price: float) -> None:
    save_alert(symbol, direction, timeframe, percent, price)
    stats = simple_history_stats(symbol, direction, 10)
    prob, tot = probability_after(ex, symbol, direction)
    dyn = extended_dynamics(ex, symbol, direction)

    icon = "üö® –ü–∞–º–ø" if direction == "pump" else "üîª –î–∞–º–ø"
    msg = f"{icon} {timeframe}\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: <b>{symbol}</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{percent:.2f}%</b> –∑–∞ {timeframe}"

    if stats:
        msg += (f"\n\nüìä –ò—Å—Ç–æ—Ä–∏—è ({stats['count']} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {direction}–æ–≤):"
                f"\n‚Äî –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{stats['avg']:.2f}%</b>"
                f"\n‚Äî –ú–∞–∫—Å: <b>{stats['max']:.2f}%</b>, –ú–∏–Ω: <b>{stats['min']:.2f}%</b>")

    if prob is not None:
        if direction == "pump":
            msg += f"\n\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ {LOOKAHEAD_MIN}–º: <b>{prob}%</b> (–ø–æ {tot} —Å–ª—É—á–∞—è–º)"
        else:
            msg += f"\n\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞ —á–µ—Ä–µ–∑ {LOOKAHEAD_MIN}–º: <b>{prob}%</b> (–ø–æ {tot} —Å–ª—É—á–∞—è–º)"

    if dyn:
        msg += "\n‚è± –°—Ä–µ–¥–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:"
        for h in [5, 15, 30, 60]:
            val = dyn.get(h)
            if val is not None:
                msg += f"\n   {h}–º: <b>{val:.2f}%</b>"

    msg += "\n\n<i>–ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç. –†–∏—Å–∫–∏ –Ω–∞ –≤–∞—Å.</i>"
    tg_send(msg)

# ===================== –î–ù–ï–í–ù–û–ô –û–¢–ß–Å–¢ =====================

def maybe_daily_report() -> None:
    try:
        utc = datetime.utcnow()
        if utc.hour != DAILY_REPORT_HOUR_UTC:
            return
        today = utc.strftime("%Y-%m-%d")
        if meta_get("daily_report_date") == today:
            return
        con = db(); c = con.cursor()
        c.execute("SELECT direction, COUNT(*) FROM alerts WHERE ts>=datetime('now','-24 hours') GROUP BY direction")
        rows = c.fetchall(); con.close()
        pumps = next((cnt for d, cnt in rows if d == "pump"), 0)
        dumps = next((cnt for d, cnt in rows if d == "dump"), 0)
        tg_send(f"üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (24—á)\n‚Äî –ü–∞–º–ø–æ–≤: <b>{pumps}</b>\n‚Äî –î–∞–º–ø–æ–≤: <b>{dumps}</b>\n‚Äî UTC: {utc.strftime('%Y-%m-%d %H:%M')}")
        meta_set("daily_report_date", today)
    except Exception as e:
        print("[REPORT]", e)

# ===================== –ö–û–ú–ê–ù–î–´ TELEGRAM =====================

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = db(); c = con.cursor()
    c.execute("SELECT symbol, direction, COUNT(*) FROM alerts WHERE ts>=datetime('now','-24 hours') GROUP BY symbol, direction")
    rows = c.fetchall(); con.close()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24—á."); return
    msg = "üìà –û—Ç—á—ë—Ç –∑–∞ 24—á:\n"
    for sym, dir_, cnt in rows:
        icon = "üö®" if dir_ == "pump" else "üîª"
        msg += f"{icon} {sym}: {cnt} ({dir_})\n"
    await update.message.reply_text(msg)

async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = db(); c = con.cursor()
    c.execute("SELECT symbol, COUNT(*) AS cnt FROM alerts GROUP BY symbol ORDER BY cnt DESC LIMIT 5")
    rows = c.fetchall(); con.close()
    if not rows:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç."); return
    msg = "üî• –¢–æ–ø-5 –ø–æ —á–∏—Å–ª—É —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
    for sym, cnt in rows:
        msg += f"{sym}: {cnt}\n"
    await update.message.reply_text(msg)

async def cmd_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history SYMBOL"); return
    symbol = context.args[0].upper()
    con = db(); c = con.cursor()
    c.execute("SELECT ts, direction, timeframe, percent FROM alerts WHERE symbol=? ORDER BY ts DESC LIMIT 10", (symbol,))
    rows = c.fetchall(); con.close()
    if not rows:
        await update.message.reply_text(f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ {symbol}."); return
    msg = f"üìú –ò—Å—Ç–æ—Ä–∏—è {symbol} (–ø–æ—Å–ª. {len(rows)}):"
    for ts, d, tf, pct in rows:
        icon = "üö®" if d == "pump" else "üîª"
        msg += f"\n{ts} {icon} {tf}: {pct:.2f}%"
    await update.message.reply_text(msg)

# ===================== MAIN =====================

async def market_loop(symbols: List[str]) -> None:
    ex = ex_futures()
    while True:
        try:
            scan_symbols(ex, symbols)
            maybe_daily_report()
        except Exception as e:
            print("[LOOP]", e)
        await asyncio.sleep(POLL_INTERVAL_SEC)

def main() -> None:
    db_init()
    tg_send("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Bybit Futures; –ø–∞–º–ø—ã+–¥–∞–º–ø—ã; –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å; –¥–∏–Ω–∞–º–∏–∫–∞; –∫–æ–º–∞–Ω–¥—ã).")

    ex = ex_futures()
    try:
        symbols = pick_swap_usdt_symbols(ex, MIN_24H_QUOTE_VOLUME_USDT, MIN_LAST_PRICE_USDT)
        tg_send(f"üìä –ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: <b>{len(symbols)}</b>")
    except Exception as e:
        print("[SYMBOLS]", e)
        symbols = []

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("report",  cmd_report))
    app.add_handler(CommandHandler("top",     cmd_top))
    app.add_handler(CommandHandler("history", cmd_history))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
    app.job_queue.run_once(lambda *_: None, when=0)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobQueue (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤)
    asyncio.get_event_loop().create_task(market_loop(symbols))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
