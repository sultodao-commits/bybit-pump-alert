#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - Immediate Short on Pumps
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º—è–≥–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""

import os
import time
import traceback
import re
from datetime import datetime
from typing import List, Dict, Any, Optional

import requests
import ccxt

# ========================= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =========================

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò - –ú–Ø–ì–ß–ï –§–ò–õ–¨–¢–†–´
PUMP_THRESHOLD = 5           # –ü–∞–º–ø –æ—Ç 5% (–±—ã–ª–æ 8)
RSI_OVERBOUGHT = 70          # RSI –æ—Ç 70 (–±—ã–ª–æ 78)
VOLUME_SPIKE_RATIO = 1.5     # –û–±—ä–µ–º –æ—Ç 1.5x (–±—ã–ª–æ 2.0)

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DUMP = 10             # –¶–µ–ª—å -10% –æ—Ç –ø–∏–∫–∞ –ø–∞–º–ø–∞
STOP_LOSS = 4                # –°—Ç–æ–ø-–ª–æ—Å—Å +4% –æ—Ç –≤—Ö–æ–¥–∞
LEVERAGE = 8                 # –ü–ª–µ—á–æ 8x

# –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–Ω–µ—Ç
MAX_MARKET_CAP = 10000000000  # –ú–∞–∫—Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è $10B (–±—ã–ª–æ $5B)
MIN_MARKET_CAP = 5000000      # –ú–∏–Ω –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è $5M (–±—ã–ª–æ $10M)
MIN_24H_VOLUME = 50000        # –ú–∏–Ω –æ–±—ä–µ–º $50K (–±—ã–ª–æ $100K)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
POLL_INTERVAL_SEC = 20        # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 20 —Å–µ–∫ (–±—ã–ª–æ 30)
SIGNAL_COOLDOWN_MIN = 30      # –ö—É–ª–¥–∞—É–Ω –Ω–∞ –º–æ–Ω–µ—Ç—É 30 –º–∏–Ω (–±—ã–ª–æ 60)

# ========================= –ö–ê–¢–ï–ì–û–†–ò–ò –ú–û–ù–ï–¢ =========================

MEME_KEYWORDS = [
    'DOGE', 'SHIB', 'PEPE', 'FLOKI', 'BONK', 'MEME', 'WIF', 'BOME', 'BABYDOGE',
    'ELON', 'DOG', 'CAT', 'HAM', 'TURBO', 'AIDOGE', 'AISHIB', 'PENGU', 'MOCHI',
    'WOJAK', 'KABOSU', 'KISHU', 'SAMO', 'SNEK', 'POPCAT', 'LILY', 'MOG', 'TOSHI',
    'HIPO', 'CHAD', 'GROK', 'LADYS', 'VOY', 'COQ', 'KERMIT', 'SPX', 'TRUMP',
    'BODEN', 'TREMP', 'SC', 'SMURFCAT', 'ANDY', 'WEN', 'MYRO', 'WU', 'MICHI',
    'NUB', 'DAVE', 'PONKE', 'MON', 'PUDGY', 'POWELL', 'PENG', 'SATOSHI', 'VITALIK',
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –º–µ–º–æ–≤
    'FART', 'POOP', 'PEE', 'CUM', 'ASS', 'BOOB', 'BUTT', 'DICK', 'WEED', 'BEER',
    'WINE', 'VODKA', 'WHISKEY', 'COKE', 'PEPSI', 'COFFEE', 'TEA', 'PIZZA', 'BURGER',
    'TACO', 'SUSHI', 'RAMEN', 'TOAST', 'BAGEL', 'DONUT', 'CAKE', 'COOKIE', 'CANDY'
]

PROMISING_LOWCAPS = [
    'AI', 'ARB', 'OP', 'APT', 'SUI', 'SEI', 'TIA', 'INJ', 'RNDR', 'FET', 
    'AGIX', 'OCEAN', 'NMR', 'LINK', 'BAND', 'DIA', 'TRB', 'UMA', 'API3',
    'GRT', 'LPT', 'LQTY', 'CRV', 'FXS', 'BAL', 'SNX', 'SUSHI', 'CAKE',
    'DYDX', 'PERP', 'GMX', 'GNS', 'VELA', 'RPL', 'LDO', 'FXS', 'FIS',
    'AAVE', 'COMP', 'MKR', 'YFI', 'ALPHA', 'ENS', 'RARE', 'SUPER', 'TVK',
    'SAND', 'MANA', 'GALA', 'ENJ', 'AXS', 'SLP', 'ILV', 'YGG', 'MC',
    'MATIC', 'AVAX', 'FTM', 'ONE', 'ALGO', 'NEAR', 'ATOM', 'OSMO', 'JUNO',
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∞–ª—å—Ç–æ–≤
    'RUNE', 'KAVA', 'EGLD', 'ZIL', 'IOTA', 'HIVE', 'STEEM', 'BTS', 'ONT', 'VET',
    'THETA', 'TFUEL', 'HOT', 'IOST', 'NEO', 'GAS', 'ICX', 'ZEN', 'SC', 'XDC'
]

LARGE_CAP_EXCLUSIONS = [
    'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOT', 'LTC', 'BCH', 'XLM',
    'LINK', 'ATOM', 'XMR', 'ETC', 'XTZ', 'EOS', 'AAVE', 'ALGO', 'AVAX',
    'AXS', 'BAT', 'COMP', 'DASH', 'ENJ', 'FIL', 'GRT', 'ICP', 'KSM', 'MANA'
]

# ========================= –°–ò–°–¢–ï–ú–ê –û–¢–õ–ê–î–ö–ò =========================

class DebugStats:
    def __init__(self):
        self.reset()
    
    def reset(self):
        self.total_scanned = 0
        self.pump_detected = 0
        self.rsi_passed = 0
        self.volume_passed = 0
        self.all_conditions_passed = 0
        self.signals_sent = 0
        
    def print_stats(self):
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {self.total_scanned}, "
              f"–ü–∞–º–ø—ã: {self.pump_detected}, RSI: {self.rsi_passed}, "
              f"–û–±—ä–µ–º: {self.volume_passed}, –°–∏–≥–Ω–∞–ª—ã: {self.all_conditions_passed}")

debug_stats = DebugStats()

# ========================= –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ú–û–ù–ï–¢ =========================

def classify_symbol(symbol: str) -> str:
    base_symbol = symbol.split('/')[0] if '/' in symbol else symbol
    
    if base_symbol in LARGE_CAP_EXCLUSIONS:
        return "largecap"
    
    if is_meme_coin(symbol):
        return "meme"
    
    if base_symbol in PROMISING_LOWCAPS:
        return "promising_lowcap"
    
    return "other_alt"

def is_meme_coin(symbol: str) -> bool:
    base_symbol = symbol.split('/')[0] if '/' in symbol else symbol
    
    for keyword in MEME_KEYWORDS:
        if keyword in base_symbol.upper():
            return True
    
    meme_patterns = [
        re.compile(r'.*DOGE.*', re.IGNORECASE),
        re.compile(r'.*SHIB.*', re.IGNORECASE),
        re.compile(r'.*PEPE.*', re.IGNORECASE),
        re.compile(r'.*FLOKI.*', re.IGNORECASE),
        re.compile(r'.*BONK.*', re.IGNORECASE),
        re.compile(r'.*MEME.*', re.IGNORECASE),
        re.compile(r'.*FART.*', re.IGNORECASE),
        re.compile(r'.*POOP.*', re.IGNORECASE),
        re.compile(r'.*ASS.*', re.IGNORECASE),
    ]
    
    for pattern in meme_patterns:
        if pattern.match(base_symbol):
            return True
    
    return False

def get_symbols_by_category(exchange) -> Dict[str, List[str]]:
    markets = exchange.load_markets()
    tickers = exchange.fetch_tickers()
    
    categorized = {
        "meme": [],
        "promising_lowcap": [], 
        "other_alt": [],
        "largecap": []
    }
    
    for symbol, market in markets.items():
        try:
            if (market.get("type") != "swap" or not market.get("swap") or 
                not market.get("linear") or market.get("settle") != "USDT"):
                continue
            
            ticker = tickers.get(symbol, {})
            quote_volume = float(ticker.get('quoteVolume', 0))
            last_price = float(ticker.get('last', 0))
            
            if quote_volume < MIN_24H_VOLUME or last_price < 0.00001:
                continue
            
            category = classify_symbol(symbol)
            
            estimated_mcap = get_market_cap_estimate(ticker)
            if estimated_mcap and estimated_mcap > MAX_MARKET_CAP:
                continue
            
            categorized[category].append(symbol)
            
        except Exception:
            continue
    
    return categorized

def get_market_cap_estimate(ticker_data: Dict) -> Optional[float]:
    try:
        last_price = float(ticker_data.get('last', 0))
        base_volume = float(ticker_data.get('baseVolume', 0))
        
        if last_price > 0 and base_volume > 0:
            return base_volume * last_price * 2  # –ï—â–µ –±–æ–ª–µ–µ –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
    except Exception:
        pass
    return None

# ========================= –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í =========================

def analyze_pump_strength(ohlcv: List, volume_data: List) -> Dict[str, Any]:
    if len(ohlcv) < 5:  # –£–º–µ–Ω—å—à–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        return {"strength": 0, "volume_spike": False, "rsi": 50, "volume_ratio": 1}
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏ (–±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–∫—Ü–∏—è)
    price_changes = []
    for i in range(1, 3):  # –¢–æ–ª—å–∫–æ 2 —Å–≤–µ—á–∏
        if len(ohlcv) > i:
            change = (ohlcv[-1][4] - ohlcv[-1-i][4]) / ohlcv[-1-i][4] * 100
            price_changes.append(change)
    
    # RSI —Å –º–µ–Ω—å—à–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    closes = [x[4] for x in ohlcv[-10:]]  # 10 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–º–µ—Å—Ç–æ 14
    rsi_val = calculate_rsi(closes, 10)  # RSI 10 –ø–µ—Ä–∏–æ–¥–æ–≤
    
    # Volume spike
    avg_volume = sum([x[5] for x in volume_data[-15:-1]]) / 14 if len(volume_data) >= 15 else volume_data[-1][5]
    volume_ratio = volume_data[-1][5] / avg_volume if avg_volume > 0 else 1
    
    strength = sum(price_changes) / len(price_changes) if price_changes else 0
    
    return {
        "strength": strength,
        "volume_spike": volume_ratio > VOLUME_SPIKE_RATIO,
        "rsi": rsi_val,
        "volume_ratio": volume_ratio
    }

def calculate_rsi(prices: List[float], period: int = 10) -> float:
    if len(prices) < period + 1:
        return 50
    
    gains = []
    losses = []
    
    for i in range(1, len(prices)):
        change = prices[i] - prices[i-1]
        if change > 0:
            gains.append(change)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(change))
    
    avg_gain = sum(gains[-period:]) / period
    avg_loss = sum(losses[-period:]) / period
    
    if avg_loss == 0:
        return 100
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return rsi

def analyze_quality_signal(symbol: str, category: str, exchange, ohlcv_5m: List, ohlcv_15m: List, ticker: Dict) -> Optional[Dict[str, Any]]:
    try:
        current_price = ticker['last']
        pump_strength = analyze_pump_strength(ohlcv_5m, ohlcv_5m)
        
        debug_stats.total_scanned += 1
        
        # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        pump_passed = pump_strength["strength"] >= PUMP_THRESHOLD
        rsi_passed = pump_strength["rsi"] >= RSI_OVERBOUGHT
        volume_passed = pump_strength["volume_ratio"] >= VOLUME_SPIKE_RATIO
        
        if pump_passed:
            debug_stats.pump_detected += 1
        if rsi_passed:
            debug_stats.rsi_passed += 1
        if volume_passed:
            debug_stats.volume_passed += 1
        
        # –†–ê–ó–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô
        if category == "meme":
            # –î–ª—è –º–µ–º–æ–≤ - —Å–∞–º—ã–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            min_pump = PUMP_THRESHOLD
            min_rsi = RSI_OVERBOUGHT - 3  # 67 –¥–ª—è –º–µ–º–æ–≤
            min_volume = VOLUME_SPIKE_RATIO
        elif category == "promising_lowcap":
            # –î–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö - —Å—Ä–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            min_pump = PUMP_THRESHOLD
            min_rsi = RSI_OVERBOUGHT - 2  # 68
            min_volume = VOLUME_SPIKE_RATIO
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            min_pump = PUMP_THRESHOLD
            min_rsi = RSI_OVERBOUGHT
            min_volume = VOLUME_SPIKE_RATIO
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
        if (pump_strength["strength"] >= min_pump and 
            pump_strength["rsi"] >= min_rsi and
            pump_strength["volume_ratio"] >= min_volume):
            
            debug_stats.all_conditions_passed += 1
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫ –ø–∞–º–ø–∞
            pump_high = max([x[2] for x in ohlcv_5m[-4:]])  # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
            
            # –í–•–û–î–ò–ú –°–ï–ô–ß–ê–° –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ!
            entry_price = current_price
            
            # –¶–µ–ª–∏ –æ—Ç –ü–ò–ö–ê –ø–∞–º–ø–∞
            take_profit = pump_high * (1 - TARGET_DUMP / 100)
            stop_loss = entry_price * (1 + STOP_LOSS / 100)
            
            # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø–∏–∫–∞
            potential_profit_pct = (pump_high - entry_price) / pump_high * 100
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è)
            confidence = calculate_confidence(pump_strength, potential_profit_pct, category)
            
            # –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ 50% –≤–º–µ—Å—Ç–æ 60%
            if confidence >= 50:
                return {
                    "symbol": symbol,
                    "category": category,
                    "direction": "SHORT",
                    "entry_price": entry_price,
                    "stop_loss": stop_loss,
                    "take_profit": take_profit,
                    "pump_high": pump_high,
                    "current_price": current_price,
                    "pump_strength": pump_strength["strength"],
                    "rsi": pump_strength["rsi"],
                    "volume_ratio": pump_strength["volume_ratio"],
                    "potential_profit_pct": potential_profit_pct,
                    "confidence": confidence,
                    "leverage": LEVERAGE,
                    "risk_reward": TARGET_DUMP / STOP_LOSS,
                    "timestamp": time.time()
                }
        
        return None
        
    except Exception as e:
        return None

def calculate_confidence(pump_strength: Dict, potential_profit: float, category: str) -> float:
    confidence = 50  # –°—Ç–∞—Ä—Ç —Å 50% –≤–º–µ—Å—Ç–æ 0
    
    # –°–∏–ª–∞ –ø–∞–º–ø–∞
    if pump_strength["strength"] >= 8:
        confidence += 20
    elif pump_strength["strength"] >= 6:
        confidence += 15
    elif pump_strength["strength"] >= 5:
        confidence += 10
    
    # RSI
    if pump_strength["rsi"] >= 75:
        confidence += 15
    elif pump_strength["rsi"] >= 70:
        confidence += 10
    
    # –û–±—ä–µ–º
    if pump_strength["volume_ratio"] >= 3:
        confidence += 15
    elif pump_strength["volume_ratio"] >= 2:
        confidence += 10
    elif pump_strength["volume_ratio"] >= 1.5:
        confidence += 5
    
    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
    if potential_profit >= 6:
        confidence += 10
    elif potential_profit >= 4:
        confidence += 5
    
    # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if category == "meme":
        confidence += 10  # –ú–µ–º—ã —Ö–æ—Ä–æ—à–æ –¥–∞–º–ø–∞—é—Ç
    
    return min(confidence, 95)

# ========================= –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ =========================

def send_telegram(text: str) -> None:
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID, 
        "text": text, 
        "parse_mode": "HTML", 
        "disable_web_page_preview": True
    }
    try:
        requests.post(url, json=payload, timeout=15)
    except Exception:
        pass

def check_existing_signals(symbol: str, recent_signals: Dict) -> bool:
    if symbol in recent_signals:
        if time.time() - recent_signals[symbol] < SIGNAL_COOLDOWN_MIN * 60:
            return False
    
    recent_signals[symbol] = time.time()
    return True

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ë–û–¢–ê –° –ú–Ø–ì–ö–ò–ú–ò –§–ò–õ–¨–¢–†–ê–ú–ò...")
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return
    
    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized_symbols = get_symbols_by_category(exchange)
    
    total_symbols = sum(len(symbols) for symbols in categorized_symbols.values() if symbols)
    
    send_telegram(
        f"üî• <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>\n"
        f"<b>–§–∏–ª—å—Ç—Ä—ã:</b> –ü–∞–º–ø ‚â•{PUMP_THRESHOLD}% | RSI ‚â•{RSI_OVERBOUGHT} | –û–±—ä–µ–º ‚â•{VOLUME_SPIKE_RATIO}x\n"
        f"<b>–¶–µ–ª—å:</b> -{TARGET_DUMP}% –æ—Ç –ø–∏–∫–∞ | <b>–ü–ª–µ—á–æ:</b> {LEVERAGE}x\n"
        f"<b>–û—Ö–≤–∞—Ç:</b> {total_symbols} –º–æ–Ω–µ—Ç\n\n"
        f"<i>‚ö° –ú—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã - –æ–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã!</i>"
    )
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç:")
    print(f"- –ú–µ–º–∫–æ–∏–Ω—ã: {len(categorized_symbols['meme'])}")
    print(f"- –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∏–∑–∫–æ–∫–∞–ø—ã: {len(categorized_symbols['promising_lowcap'])}")
    print(f"- –î—Ä—É–≥–∏–µ –∞–ª—å—Ç—ã: {len(categorized_symbols['other_alt'])}")
    print(f"üéØ –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º: {total_symbols} –º–æ–Ω–µ—Ç")
    
    cycle_count = 0
    
    while True:
        try:
            cycle_count += 1
            debug_stats.reset()
            quality_signals = []
            
            print(f"\nüîÑ –¶–∏–∫–ª #{cycle_count} - –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            for category in ["meme", "promising_lowcap", "other_alt"]:
                symbols = categorized_symbols[category]
                
                for symbol in symbols:
                    try:
                        ohlcv_5m = exchange.fetch_ohlcv(symbol, '5m', limit=20)  # –ú–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        ohlcv_15m = exchange.fetch_ohlcv(symbol, '15m', limit=10)
                        ticker = exchange.fetch_ticker(symbol)
                        
                        if not ohlcv_5m or not ohlcv_15m:
                            continue
                        
                        signal = analyze_quality_signal(symbol, category, exchange, ohlcv_5m, ohlcv_15m, ticker)
                        
                        if signal:
                            if check_existing_signals(symbol, recent_signals):
                                quality_signals.append(signal)
                                debug_stats.signals_sent += 1
                        
                        time.sleep(0.03)  # –ú–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞
                        
                    except Exception:
                        continue
            
            # –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            debug_stats.print_stats()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã
            quality_signals.sort(key=lambda x: x["confidence"], reverse=True)
            
            for signal in quality_signals:
                message = format_signal_message(signal)
                send_telegram(message)
                print(f"üì¢ –û–¢–ü–†–ê–í–õ–ï–ù –°–ò–ì–ù–ê–õ: {signal['category']} - {signal['symbol']} "
                      f"(–ø–∞–º–ø: {signal['pump_strength']:.1f}%, RSI: {signal['rsi']:.1f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.0f}%)")
                time.sleep(1)
            
            if quality_signals:
                print(f"üéâ –ù–ê–ô–î–ï–ù–û –°–ò–ì–ù–ê–õ–û–í: {len(quality_signals)}")
            else:
                print("‚ùå –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)
        
        print(f"‚è∞ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

def format_signal_message(signal: Dict) -> str:
    symbol = signal["symbol"]
    category = signal["category"]
    entry = signal["entry_price"]
    stop = signal["stop_loss"]
    take = signal["take_profit"]
    pump_high = signal["pump_high"]
    
    category_emojis = {"meme": "üê∂", "promising_lowcap": "üöÄ", "other_alt": "üíé"}
    category_name = {"meme": "–ú–µ–º–∫–æ–∏–Ω", "promising_lowcap": "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π", "other_alt": "–ê–ª—å—Ç–∫–æ–∏–Ω"}
    
    emoji = category_emojis.get(category, "üìä")
    cat_name = category_name.get(category, "–ê–ª—å—Ç–∫–æ–∏–Ω")
    
    message = (
        f"üéØ <b>–°–ò–ì–ù–ê–õ –î–õ–Ø –í–•–û–î–ê</b> üéØ\n"
        f"{emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {cat_name}\n\n"
        
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {symbol}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> SHORT üêª\n\n"
        
        f"üìä <b>–î–ê–ù–ù–´–ï –ü–ê–ú–ü–ê:</b>\n"
        f"‚Ä¢ –°–∏–ª–∞: <b>{signal['pump_strength']:.1f}%</b>\n"
        f"‚Ä¢ RSI: <b>{signal['rsi']:.1f}</b>\n"
        f"‚Ä¢ –û–±—ä–µ–º: <b>x{signal['volume_ratio']:.1f}</b>\n"
        f"‚Ä¢ –ü–∏–∫: <b>{pump_high:.6f}</b>\n\n"
        
        f"üíé <b>–ü–ê–†–ê–ú–ï–¢–†–´:</b>\n"
        f"‚Ä¢ –í—Ö–æ–¥: <b>{entry:.6f}</b>\n"
        f"‚Ä¢ –°—Ç–æ–ø: <b>{stop:.6f}</b>\n"
        f"‚Ä¢ –¢–µ–π–∫: <b>{take:.6f}</b>\n"
        f"‚Ä¢ –ü–ª–µ—á–æ: <b>{LEVERAGE}x</b>\n"
        f"‚Ä¢ R/R: <b>1:{signal['risk_reward']:.1f}</b>\n\n"
        
        f"‚ö° <b>–£–í–ï–†–ï–ù–ù–û–°–¢–¨:</b> <b>{signal['confidence']:.0f}%</b>\n"
    )
    
    return message

if __name__ == "__main__":
    main()
