#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bybit Futures Signals Bot - –ö–£–õ–î–ê–£–ù 7 –ß–ê–°–û–í
"""

import os
import time
import requests
import ccxt
import numpy as np
from typing import List, Dict, Any, Optional

# ========================= –ù–ê–°–¢–†–û–ô–ö–ò =========================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# ========================= –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================

# CORE 
RSI_LENGTH = 14
EMA_LENGTH = 50
BB_LENGTH = 20
BB_MULTIPLIER = 1.8

# THRESHOLDS (–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï)
RSI_PANIC_THRESHOLD = 30    # –°—Ç—Ä–æ–≥–∏–µ –∑–æ–Ω—ã
RSI_FOMO_THRESHOLD = 70     # –°—Ç—Ä–æ–≥–∏–µ –∑–æ–Ω—ã

# FILTERS (–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï)
USE_EMA_SIDE_FILTER = False   # –í–´–ö–õ–Æ–ß–ï–ù EMA —Ñ–∏–ª—å—Ç—Ä
MIN_VOLUME_ZSCORE = 1.0       # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
REQUIRE_RETURN_BB = True      # –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –≤ BB
REQUIRE_CANDLE_CONFIRM = True
MIN_BODY_PCT = 0.25           # –£–ú–ï–ù–¨–®–ï–ù–û —Ç–µ–ª–æ —Å–≤–µ—á–∏

POLL_INTERVAL_SEC = 60
SIGNAL_COOLDOWN_MIN = 420     # –ö–£–õ–î–ê–£–ù 7 –ß–ê–°–û–í (60 * 7 = 420)

# ========================= –ò–ù–î–ò–ö–ê–¢–û–†–´ =========================

def calculate_rsi(prices: List[float], period: int = 14) -> float:
    if len(prices) < period + 1:
        return 50.0
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d for d in deltas if d > 0]
    losses = [-d for d in deltas if d < 0]
    if not gains and not losses:
        return 50.0
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return min(max(rsi, 0), 100)

def calculate_ema(prices: List[float], period: int) -> float:
    if len(prices) < period:
        return prices[-1] if prices else 0
    weights = np.exp(np.linspace(-1., 0., period))
    weights /= weights.sum()
    return np.convolve(prices[-period:], weights, mode='valid')[-1]

def calculate_bollinger_bands(prices: List[float], period: int, mult: float) -> tuple:
    if len(prices) < period:
        basis = prices[-1] if prices else 0
        return basis, basis, basis
    basis = np.mean(prices[-period:])
    dev = mult * np.std(prices[-period:])
    upper = basis + dev
    lower = basis - dev
    return basis, upper, lower

def calculate_volume_zscore(volumes: List[float], period: int) -> float:
    if len(volumes) < period:
        return 0.0
    recent_volumes = volumes[-period:]
    mean_vol = np.mean(recent_volumes)
    std_vol = np.std(recent_volumes)
    if std_vol == 0:
        return 0.0
    return (volumes[-1] - mean_vol) / std_vol

# ========================= –õ–û–ì–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í =========================

def analyze_tv_signals(symbol: str, ohlcv: List) -> Optional[Dict[str, Any]]:
    try:
        if len(ohlcv) < 25:
            return None

        closes = [float(c[4]) for c in ohlcv]
        opens = [float(c[1]) for c in ohlcv]
        highs = [float(c[2]) for c in ohlcv]
        lows = [float(c[3]) for c in ohlcv]
        volumes = [float(c[5]) for c in ohlcv]

        current_close = closes[-1]
        current_open = opens[-1]
        current_high = highs[-1]
        current_low = lows[-1]
        prev_close = closes[-2] if len(closes) > 1 else current_close

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = calculate_rsi(closes, RSI_LENGTH)
        ema = calculate_ema(closes, EMA_LENGTH)
        basis, bb_upper, bb_lower = calculate_bollinger_bands(closes, BB_LENGTH, BB_MULTIPLIER)
        volume_zscore = calculate_volume_zscore(volumes, BB_LENGTH)
        
        # –§–ò–õ–¨–¢–†–´
        volume_pass = volume_zscore >= MIN_VOLUME_ZSCORE
        
        candle_range = max(current_high - current_low, 0.0001)
        body = abs(current_close - current_open)
        body_pct = body / candle_range
        bull_candle_ok = (current_close > current_open) and (body_pct >= MIN_BODY_PCT)
        bear_candle_ok = (current_close < current_open) and (body_pct >= MIN_BODY_PCT)

        # –£—Å–ª–æ–≤–∏—è RSI
        long_rsi = rsi < RSI_PANIC_THRESHOLD
        short_rsi = rsi > RSI_FOMO_THRESHOLD
        
        # –£—Å–ª–æ–≤–∏—è BB (—Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç)
        long_bb = (prev_close <= bb_lower) and (current_close > bb_lower)
        short_bb = (prev_close >= bb_upper) and (current_close < bb_upper)

        # –°–ò–ì–ù–ê–õ–´ (–ë–ï–ó EMA –§–ò–õ–¨–¢–†–ê)
        long_signal = (long_rsi or long_bb) and bull_candle_ok and volume_pass
        short_signal = (short_rsi or short_bb) and bear_candle_ok and volume_pass

        if not long_signal and not short_signal:
            return None

        if long_signal:
            signal_type = "LONG"
            confidence = 80
        else:
            signal_type = "SHORT"
            confidence = 80

        print(f"üéØ {symbol}: {signal_type} | RSI={rsi:.1f} | –û–±—ä–µ–º Z={volume_zscore:.2f} | –¢–µ–ª–æ={body_pct:.1%}")

        return {
            "symbol": symbol,
            "type": signal_type,
            "rsi": rsi,
            "ema": ema,
            "bb_upper": bb_upper,
            "bb_lower": bb_lower,
            "volume_zscore": volume_zscore,
            "body_pct": body_pct,
            "confidence": confidence,
            "timestamp": time.time()
        }

    except Exception as e:
        return None

# ========================= TELEGRAM =========================

def send_telegram(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except:
        pass

def format_signal_message(signal: Dict) -> str:
    if signal["type"] == "LONG":
        emoji = "üü¢"
        action = "LONG"
    else:
        emoji = "üî¥"
        action = "SHORT"
    
    return (
        f"{emoji} <b>{action} –°–ò–ì–ù–ê–õ</b>\n\n"
        f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {signal['symbol']}\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']:.1f}%\n\n"
        f"<b>–ê–ù–ê–õ–ò–ó:</b>\n"
        f"‚Ä¢ RSI: {signal['rsi']:.1f}\n"
        f"‚Ä¢ –û–±—ä–µ–º Z-score: {signal['volume_zscore']:.2f}\n"
        f"‚Ä¢ –¢–µ–ª–æ —Å–≤–µ—á–∏: {signal['body_pct']:.1%}\n\n"
        f"<i>‚è∞ –ö—É–ª–¥–∞—É–Ω 7 —á–∞—Å–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—É</i>"
    )

# ========================= –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ =========================

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê: –ö–£–õ–î–ê–£–ù 7 –ß–ê–°–û–í")
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID!")
        return

    exchange = ccxt.bybit({"enableRateLimit": True})
    recent_signals = {}

    markets = exchange.load_markets()
    symbols = []

    for symbol, market in markets.items():
        try:
            if (market.get("type") == "swap" and market.get("linear") and
                market.get("settle") == "USDT" and "USDT" in symbol and "/" in symbol):
                symbols.append(symbol)
        except:
            continue

    total_symbols = len(symbols)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: {total_symbols}")
    send_telegram(f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>: –ö—É–ª–¥–∞—É–Ω 7 —á–∞—Å–æ–≤ | {total_symbols} –º–æ–Ω–µ—Ç")

    signal_count = 0

    while True:
        try:
            print(f"\n‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... | –°–∏–≥–Ω–∞–ª–æ–≤: {signal_count}")
            current_time = time.time()

            for symbol in symbols:
                try:
                    # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê 7 –ß–ê–°–û–í
                    if symbol in recent_signals:
                        time_since_last_signal = current_time - recent_signals[symbol]
                        if time_since_last_signal < SIGNAL_COOLDOWN_MIN * 60:
                            continue

                    ohlcv = exchange.fetch_ohlcv(symbol, '15m', limit=25)
                    if not ohlcv or len(ohlcv) < 20:
                        continue

                    signal = analyze_tv_signals(symbol, ohlcv)
                    if not signal:
                        continue

                    # –°–û–•–†–ê–ù–Ø–ï–ú –í–†–ï–ú–Ø –°–ò–ì–ù–ê–õ–ê
                    recent_signals[symbol] = current_time
                    send_telegram(format_signal_message(signal))
                    signal_count += 1
                    print(f"üéØ –°–ò–ì–ù–ê–õ #{signal_count}: {symbol} | –°–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ 7 —á–∞—Å–æ–≤")

                except Exception as e:
                    continue

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Ö—Ä–∞–Ω–∏–º 14 —á–∞—Å–æ–≤)
            current_time = time.time()
            recent_signals = {k: v for k, v in recent_signals.items() 
                            if current_time - v < SIGNAL_COOLDOWN_MIN * 60 * 2}

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)

        print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {POLL_INTERVAL_SEC} —Å–µ–∫...")
        time.sleep(POLL_INTERVAL_SEC)

if __name__ == "__main__":
    main()
